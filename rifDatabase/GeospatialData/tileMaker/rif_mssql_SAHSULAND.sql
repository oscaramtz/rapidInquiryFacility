-- ************************************************************************
--
-- Description:
--
-- Rapid Enquiry Facility (RIF) - Tile maker
--
-- Copyright:
--
-- The Rapid Inquiry Facility (RIF) is an automated tool devised by SAHSU 
-- that rapidly addresses epidemiological and public health questions using 
-- routinely collected health and population data and generates standardised 
-- rates and relative risks for any given health outcome, for specified age 
-- and year ranges, for any given geographical area.
--
-- Copyright 2014 Imperial College London, developed by the Small Area
-- Health Statistics Unit. The work of the Small Area Health Statistics Unit 
-- is funded by the Public Health England as part of the MRC-PHE Centre for 
-- Environment and Health. Funding for this project has also been received 
-- from the Centers for Disease Control and Prevention.  
--
-- This file is part of the Rapid Inquiry Facility (RIF) project.
-- RIF is free software: you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- RIF is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General Public License
-- along with RIF. If not, see <http://www.gnu.org/licenses/>; or write 
-- to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, 
-- Boston, MA 02110-1301 USA
--
-- Author:
--
-- Peter Hambly, SAHSU
--
-- This script is autogenerated.
--
--
-- Load processed geomtry and tiles tables into production database:
--       
-- a) integrate with RIF40 control tables, e.g:                   
--    * geography_usa_2014                               
--    * geolevels_usa_2014     
-- b) Processed geometry data (partitioned in PostGres), e.g:                          
--    * geometry_usa_2014                                  
-- c) Hierarchy table, e.g:
--    * hierarchy_usa_2014   
-- d) Lookup tables, e.g:
--    * lookup_cb_2014_us_county_500k             
--    * lookup_cb_2014_us_nation_5m                    
--    * lookup_cb_2014_us_state_500k      
-- e) Tiles table and view               
--    * t_tiles_usa_2014           
--    * tiles_usa_2014   
--

--
-- MS SQL Server specific parameters
--
-- Usage: sqlcmd -U rif40 -d <database name> -b -m-1 -e -r1 -i rif_mssql_SAHSULAND.sql -v pwd="%cd%"
-- Connect flags if required: -P <password> -S<myServerinstanceName>
--
-- You must set the current schema if you cannot write to the default schema!
-- You need create privilege for the various object and the bulkadmin role
--
-- USE <my database>;
--
SET QUOTED_IDENTIFIER ON;
-- SET STATISTICS TIME ON;

--
-- Set schema variable used by scripts etc to RIF_DATA
--
:SETVAR SchemaName "rif_data"
--

-- SQL statement 0: Start transaction >>>
BEGIN TRANSACTION;
GO

-- SQL statement 1: RIF initialisation >>>
/*
 * SQL statement name: 	rif_startup.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:			None
 *
 * Description:			Run RIF startup script
 * Note:				% becomes % after substitution
 */

--
-- Eof;
GO

-- SQL statement 2: Check if geography is in use in studies. Raise error if it is. >>>
/*
 * SQL statement name: 	in_use_check.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Geography; e.g. SAHSULAND
 *
 * Description:			Check if geography is in use in studies. Raise error if it is. 
 *						To prevent accidental replacement
 * Note:				% becomes % after substitution
 */
DECLARE c1 CURSOR FOR 
		SELECT COUNT(DISTINCT(a.study_id)) AS total
		  FROM t_rif40_studies a
		 WHERE a.geography  = 'SAHSULAND';
DECLARE @c1_total AS int;
OPEN c1;
FETCH NEXT FROM c1 INTO @c1_total;
IF @c1_total = 0
	PRINT 'Geography: SAHSULAND is not used by any studies';
ELSE
	PRINT 'WARNING: Geography: SAHSULAND is used by: ' + CAST(@c1_total AS VARCHAR) + ' studies';
CLOSE c1;
DEALLOCATE c1;
GO

--
-- Create Geolevels lookup tables
--

-- SQL statement 4: Drop table lookup_sahsu_grd_level1 >>>
IF OBJECT_ID('rif_data.lookup_sahsu_grd_level1', 'U') IS NOT NULL DROP TABLE rif_data.lookup_sahsu_grd_level1;
GO

-- SQL statement 5: Create table lookup_sahsu_grd_level1 >>>
/*
 * SQL statement name: 	create_lookup_table.sql
 * Type:				Microsoft SQL Server T/sql
 * Parameters:
 *						1: table; e.g. lookup_sahsu_grd_level1
 * 						2: Lookup column - shapefile table name, e.g. sahsu_grd_level1
 *						3: Schema; e.g. rif_data. or ""
 *
 * Description:			Create lookup table
 * Note:				%% becomes % after substitution
 */
CREATE TABLE rif_data.lookup_sahsu_grd_level1 (
	sahsu_grd_level1			NVARCHAR(100)  NOT NULL,
	areaname	NVARCHAR(1000),
	gid			INTEGER		  NOT NULL,
	geographic_centroid		VARCHAR(1000),
	PRIMARY KEY (sahsu_grd_level1)
);
GO

-- SQL statement 6: Comment table lookup_sahsu_grd_level1 >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_table.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. cb_2014_us_county_500k
 *						2: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.lookup_sahsu_grd_level1'
ELSE
	SELECT @tableName = '$(SchemaName).lookup_sahsu_grd_level1';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name]     = N'MS_Description'
		   AND [minor_id] = 0)
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Lookup table for Level 1 (top level)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level1'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Lookup table for Level 1 (top level)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level1';
GO

-- SQL statement 7: Comment lookup_sahsu_grd_level1 columns >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.lookup_sahsu_grd_level1'
ELSE
	SELECT @tableName = '$(SchemaName).lookup_sahsu_grd_level1';
SELECT @columnName  = 'sahsu_grd_level1';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Area ID field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'sahsu_grd_level1'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Area ID field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'sahsu_grd_level1';
GO

-- SQL statement 8: Comment lookup_sahsu_grd_level1 columns >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.lookup_sahsu_grd_level1'
ELSE
	SELECT @tableName = '$(SchemaName).lookup_sahsu_grd_level1';
SELECT @columnName  = 'gid';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'GID field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'gid'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'GID field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'gid';
GO

-- SQL statement 9: Comment lookup_sahsu_grd_level1 columns >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.lookup_sahsu_grd_level1'
ELSE
	SELECT @tableName = '$(SchemaName).lookup_sahsu_grd_level1';
SELECT @columnName  = 'areaname';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Area Name field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'areaname'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Area Name field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'areaname';
GO

-- SQL statement 10: Comment lookup_sahsu_grd_level1 columns >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.lookup_sahsu_grd_level1'
ELSE
	SELECT @tableName = '$(SchemaName).lookup_sahsu_grd_level1';
SELECT @columnName  = 'geographic_centroid';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Geographic centroid', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'geographic_centroid'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Geographic centroid', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'geographic_centroid';
GO

-- SQL statement 11: Drop table lookup_sahsu_grd_level2 >>>
IF OBJECT_ID('rif_data.lookup_sahsu_grd_level2', 'U') IS NOT NULL DROP TABLE rif_data.lookup_sahsu_grd_level2;
GO

-- SQL statement 12: Create table lookup_sahsu_grd_level2 >>>
/*
 * SQL statement name: 	create_lookup_table.sql
 * Type:				Microsoft SQL Server T/sql
 * Parameters:
 *						1: table; e.g. lookup_sahsu_grd_level1
 * 						2: Lookup column - shapefile table name, e.g. sahsu_grd_level1
 *						3: Schema; e.g. rif_data. or ""
 *
 * Description:			Create lookup table
 * Note:				%% becomes % after substitution
 */
CREATE TABLE rif_data.lookup_sahsu_grd_level2 (
	sahsu_grd_level2			NVARCHAR(100)  NOT NULL,
	areaname	NVARCHAR(1000),
	gid			INTEGER		  NOT NULL,
	geographic_centroid		VARCHAR(1000),
	PRIMARY KEY (sahsu_grd_level2)
);
GO

-- SQL statement 13: Comment table lookup_sahsu_grd_level2 >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_table.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. cb_2014_us_county_500k
 *						2: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.lookup_sahsu_grd_level2'
ELSE
	SELECT @tableName = '$(SchemaName).lookup_sahsu_grd_level2';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name]     = N'MS_Description'
		   AND [minor_id] = 0)
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Lookup table for Level 2', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level2'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Lookup table for Level 2', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level2';
GO

-- SQL statement 14: Comment lookup_sahsu_grd_level2 columns >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.lookup_sahsu_grd_level2'
ELSE
	SELECT @tableName = '$(SchemaName).lookup_sahsu_grd_level2';
SELECT @columnName  = 'sahsu_grd_level2';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Area ID field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'sahsu_grd_level2'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Area ID field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'sahsu_grd_level2';
GO

-- SQL statement 15: Comment lookup_sahsu_grd_level2 columns >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.lookup_sahsu_grd_level2'
ELSE
	SELECT @tableName = '$(SchemaName).lookup_sahsu_grd_level2';
SELECT @columnName  = 'gid';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'GID field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'gid'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'GID field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'gid';
GO

-- SQL statement 16: Comment lookup_sahsu_grd_level2 columns >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.lookup_sahsu_grd_level2'
ELSE
	SELECT @tableName = '$(SchemaName).lookup_sahsu_grd_level2';
SELECT @columnName  = 'areaname';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Area Name field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'areaname'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Area Name field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'areaname';
GO

-- SQL statement 17: Comment lookup_sahsu_grd_level2 columns >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.lookup_sahsu_grd_level2'
ELSE
	SELECT @tableName = '$(SchemaName).lookup_sahsu_grd_level2';
SELECT @columnName  = 'geographic_centroid';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Geographic centroid', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'geographic_centroid'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Geographic centroid', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'geographic_centroid';
GO

-- SQL statement 18: Drop table lookup_sahsu_grd_level3 >>>
IF OBJECT_ID('rif_data.lookup_sahsu_grd_level3', 'U') IS NOT NULL DROP TABLE rif_data.lookup_sahsu_grd_level3;
GO

-- SQL statement 19: Create table lookup_sahsu_grd_level3 >>>
/*
 * SQL statement name: 	create_lookup_table.sql
 * Type:				Microsoft SQL Server T/sql
 * Parameters:
 *						1: table; e.g. lookup_sahsu_grd_level1
 * 						2: Lookup column - shapefile table name, e.g. sahsu_grd_level1
 *						3: Schema; e.g. rif_data. or ""
 *
 * Description:			Create lookup table
 * Note:				%% becomes % after substitution
 */
CREATE TABLE rif_data.lookup_sahsu_grd_level3 (
	sahsu_grd_level3			NVARCHAR(100)  NOT NULL,
	areaname	NVARCHAR(1000),
	gid			INTEGER		  NOT NULL,
	geographic_centroid		VARCHAR(1000),
	PRIMARY KEY (sahsu_grd_level3)
);
GO

-- SQL statement 20: Comment table lookup_sahsu_grd_level3 >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_table.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. cb_2014_us_county_500k
 *						2: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.lookup_sahsu_grd_level3'
ELSE
	SELECT @tableName = '$(SchemaName).lookup_sahsu_grd_level3';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name]     = N'MS_Description'
		   AND [minor_id] = 0)
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Lookup table for Level 3', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level3'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Lookup table for Level 3', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level3';
GO

-- SQL statement 21: Comment lookup_sahsu_grd_level3 columns >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.lookup_sahsu_grd_level3'
ELSE
	SELECT @tableName = '$(SchemaName).lookup_sahsu_grd_level3';
SELECT @columnName  = 'sahsu_grd_level3';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Area ID field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'sahsu_grd_level3'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Area ID field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'sahsu_grd_level3';
GO

-- SQL statement 22: Comment lookup_sahsu_grd_level3 columns >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.lookup_sahsu_grd_level3'
ELSE
	SELECT @tableName = '$(SchemaName).lookup_sahsu_grd_level3';
SELECT @columnName  = 'gid';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'GID field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'gid'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'GID field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'gid';
GO

-- SQL statement 23: Comment lookup_sahsu_grd_level3 columns >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.lookup_sahsu_grd_level3'
ELSE
	SELECT @tableName = '$(SchemaName).lookup_sahsu_grd_level3';
SELECT @columnName  = 'areaname';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Area Name field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'areaname'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Area Name field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'areaname';
GO

-- SQL statement 24: Comment lookup_sahsu_grd_level3 columns >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.lookup_sahsu_grd_level3'
ELSE
	SELECT @tableName = '$(SchemaName).lookup_sahsu_grd_level3';
SELECT @columnName  = 'geographic_centroid';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Geographic centroid', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'geographic_centroid'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Geographic centroid', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'geographic_centroid';
GO

-- SQL statement 25: Drop table lookup_sahsu_grd_level4 >>>
IF OBJECT_ID('rif_data.lookup_sahsu_grd_level4', 'U') IS NOT NULL DROP TABLE rif_data.lookup_sahsu_grd_level4;
GO

-- SQL statement 26: Create table lookup_sahsu_grd_level4 >>>
/*
 * SQL statement name: 	create_lookup_table.sql
 * Type:				Microsoft SQL Server T/sql
 * Parameters:
 *						1: table; e.g. lookup_sahsu_grd_level1
 * 						2: Lookup column - shapefile table name, e.g. sahsu_grd_level1
 *						3: Schema; e.g. rif_data. or ""
 *
 * Description:			Create lookup table
 * Note:				%% becomes % after substitution
 */
CREATE TABLE rif_data.lookup_sahsu_grd_level4 (
	sahsu_grd_level4			NVARCHAR(100)  NOT NULL,
	areaname	NVARCHAR(1000),
	gid			INTEGER		  NOT NULL,
	geographic_centroid		VARCHAR(1000),
	PRIMARY KEY (sahsu_grd_level4)
);
GO

-- SQL statement 27: Comment table lookup_sahsu_grd_level4 >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_table.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. cb_2014_us_county_500k
 *						2: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.lookup_sahsu_grd_level4'
ELSE
	SELECT @tableName = '$(SchemaName).lookup_sahsu_grd_level4';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name]     = N'MS_Description'
		   AND [minor_id] = 0)
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Lookup table for Level 4', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level4'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Lookup table for Level 4', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level4';
GO

-- SQL statement 28: Comment lookup_sahsu_grd_level4 columns >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.lookup_sahsu_grd_level4'
ELSE
	SELECT @tableName = '$(SchemaName).lookup_sahsu_grd_level4';
SELECT @columnName  = 'sahsu_grd_level4';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Area ID field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'sahsu_grd_level4'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Area ID field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'sahsu_grd_level4';
GO

-- SQL statement 29: Comment lookup_sahsu_grd_level4 columns >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.lookup_sahsu_grd_level4'
ELSE
	SELECT @tableName = '$(SchemaName).lookup_sahsu_grd_level4';
SELECT @columnName  = 'gid';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'GID field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'gid'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'GID field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'gid';
GO

-- SQL statement 30: Comment lookup_sahsu_grd_level4 columns >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.lookup_sahsu_grd_level4'
ELSE
	SELECT @tableName = '$(SchemaName).lookup_sahsu_grd_level4';
SELECT @columnName  = 'areaname';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Area Name field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'areaname'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Area Name field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'areaname';
GO

-- SQL statement 31: Comment lookup_sahsu_grd_level4 columns >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.lookup_sahsu_grd_level4'
ELSE
	SELECT @tableName = '$(SchemaName).lookup_sahsu_grd_level4';
SELECT @columnName  = 'geographic_centroid';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Geographic centroid', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'geographic_centroid'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Geographic centroid', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'geographic_centroid';
GO

--
-- Load geolevel lookup tables
--

-- SQL statement 33: Load DB specific geolevel lookup table: (mssql_/pg_)lookup_sahsu_grd_level1 >>>
BULK INSERT rif_data.lookup_sahsu_grd_level1
FROM '$(pwd)\mssql_lookup_sahsu_grd_level1.csv'	-- Note use of pwd; set via -v pwd="%cd%" in the sqlcmd command line
WITH
(
	FORMATFILE = '$(pwd)\mssql_lookup_sahsu_grd_level1.fmt',		-- Use a format file
	TABLOCK					-- Table lock
);
GO

-- SQL statement 34: Load DB specific geolevel lookup table: (mssql_/pg_)lookup_sahsu_grd_level2 >>>
BULK INSERT rif_data.lookup_sahsu_grd_level2
FROM '$(pwd)\mssql_lookup_sahsu_grd_level2.csv'	-- Note use of pwd; set via -v pwd="%cd%" in the sqlcmd command line
WITH
(
	FORMATFILE = '$(pwd)\mssql_lookup_sahsu_grd_level2.fmt',		-- Use a format file
	TABLOCK					-- Table lock
);
GO

-- SQL statement 35: Load DB specific geolevel lookup table: (mssql_/pg_)lookup_sahsu_grd_level3 >>>
BULK INSERT rif_data.lookup_sahsu_grd_level3
FROM '$(pwd)\mssql_lookup_sahsu_grd_level3.csv'	-- Note use of pwd; set via -v pwd="%cd%" in the sqlcmd command line
WITH
(
	FORMATFILE = '$(pwd)\mssql_lookup_sahsu_grd_level3.fmt',		-- Use a format file
	TABLOCK					-- Table lock
);
GO

-- SQL statement 36: Load DB specific geolevel lookup table: (mssql_/pg_)lookup_sahsu_grd_level4 >>>
BULK INSERT rif_data.lookup_sahsu_grd_level4
FROM '$(pwd)\mssql_lookup_sahsu_grd_level4.csv'	-- Note use of pwd; set via -v pwd="%cd%" in the sqlcmd command line
WITH
(
	FORMATFILE = '$(pwd)\mssql_lookup_sahsu_grd_level4.fmt',		-- Use a format file
	TABLOCK					-- Table lock
);
GO

--
-- Hierarchy table
--

-- SQL statement 38: Drop table hierarchy_sahsuland >>>
IF OBJECT_ID('rif_data.hierarchy_sahsuland', 'U') IS NOT NULL DROP TABLE rif_data.hierarchy_sahsuland;
GO

-- SQL statement 39: Create table hierarchy_sahsuland >>>
CREATE TABLE rif_data.hierarchy_sahsuland (
	sahsu_grd_level1	VARCHAR(100)  NOT NULL,
	sahsu_grd_level2	VARCHAR(100)  NOT NULL,
	sahsu_grd_level3	VARCHAR(100)  NOT NULL,
	sahsu_grd_level4	VARCHAR(100)  NOT NULL);
GO

-- SQL statement 40: Add primary key hierarchy_sahsuland >>>
ALTER TABLE rif_data.hierarchy_sahsuland ADD PRIMARY KEY (sahsu_grd_level4);
GO

-- SQL statement 41: Add index key hierarchy_sahsuland_sahsu_grd_level2 >>>
CREATE INDEX hierarchy_sahsuland_sahsu_grd_level2 ON rif_data.hierarchy_sahsuland (sahsu_grd_level2);
GO

-- SQL statement 42: Add index key hierarchy_sahsuland_sahsu_grd_level3 >>>
CREATE INDEX hierarchy_sahsuland_sahsu_grd_level3 ON rif_data.hierarchy_sahsuland (sahsu_grd_level3);
GO

-- SQL statement 43: Comment table: hierarchy_sahsuland >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_table.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. cb_2014_us_county_500k
 *						2: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.hierarchy_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).hierarchy_sahsuland';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name]     = N'MS_Description'
		   AND [minor_id] = 0)
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Hierarchy lookup table for SAHSU Example geography', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'hierarchy_sahsuland'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Hierarchy lookup table for SAHSU Example geography', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'hierarchy_sahsuland';
GO

-- SQL statement 44: Comment column: hierarchy_sahsuland.sahsu_grd_level1 >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.hierarchy_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).hierarchy_sahsuland';
SELECT @columnName  = 'sahsu_grd_level1';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Hierarchy lookup for Level 1 (top level)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'hierarchy_sahsuland',
		@level2type = N'Column', @level2name = 'sahsu_grd_level1'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Hierarchy lookup for Level 1 (top level)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'hierarchy_sahsuland',
		@level2type = N'Column', @level2name = 'sahsu_grd_level1';
GO

-- SQL statement 45: Comment column: hierarchy_sahsuland.sahsu_grd_level2 >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.hierarchy_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).hierarchy_sahsuland';
SELECT @columnName  = 'sahsu_grd_level2';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Hierarchy lookup for Level 2', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'hierarchy_sahsuland',
		@level2type = N'Column', @level2name = 'sahsu_grd_level2'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Hierarchy lookup for Level 2', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'hierarchy_sahsuland',
		@level2type = N'Column', @level2name = 'sahsu_grd_level2';
GO

-- SQL statement 46: Comment column: hierarchy_sahsuland.sahsu_grd_level3 >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.hierarchy_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).hierarchy_sahsuland';
SELECT @columnName  = 'sahsu_grd_level3';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Hierarchy lookup for Level 3', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'hierarchy_sahsuland',
		@level2type = N'Column', @level2name = 'sahsu_grd_level3'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Hierarchy lookup for Level 3', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'hierarchy_sahsuland',
		@level2type = N'Column', @level2name = 'sahsu_grd_level3';
GO

-- SQL statement 47: Comment column: hierarchy_sahsuland.sahsu_grd_level4 >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.hierarchy_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).hierarchy_sahsuland';
SELECT @columnName  = 'sahsu_grd_level4';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Hierarchy lookup for Level 4', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'hierarchy_sahsuland',
		@level2type = N'Column', @level2name = 'sahsu_grd_level4'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Hierarchy lookup for Level 4', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'hierarchy_sahsuland',
		@level2type = N'Column', @level2name = 'sahsu_grd_level4';
GO

--
-- Load hierarchy table
--

-- SQL statement 49: Load DB dependent hierarchy table from CSV file >>>
BULK INSERT rif_data.hierarchy_sahsuland
FROM '$(pwd)\mssql_hierarchy_sahsuland.csv'	-- Note use of pwd; set via -v pwd="%cd%" in the sqlcmd command line
WITH
(
	FORMATFILE = '$(pwd)\mssql_hierarchy_sahsuland.fmt',		-- Use a format file
	TABLOCK					-- Table lock
);
GO

--
-- Create geometry table
--

-- SQL statement 51: Drop geometry table geometry_sahsuland >>>
IF OBJECT_ID('rif_data.geometry_sahsuland', 'U') IS NOT NULL DROP TABLE rif_data.geometry_sahsuland;
GO

-- SQL statement 52: Create geometry table geometry_sahsuland >>>
/*
 * SQL statement name: 	create_geometry_table.sql
 * Type:				Common SQL statement
 * Parameters:
 *						1: table; e.g. geometry_cb_2014_us_500k
 *						2: schema; e.g.rif_data. or ""
 *
 * Description:			Create geometry table
 * Note:				% becomes % after substitution
 */
CREATE TABLE rif_data.geometry_sahsuland (
	geolevel_id		INTEGER			NOT NULL,
	areaid			VARCHAR(200)	NOT NULL,
	zoomlevel		INTEGER			NOT NULL);
GO

-- SQL statement 53: Add geom geometry column >>>
/*
 * SQL statement name: 	add_geometry_column2.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. geometry_cb_2014_us_500k
 *						2: column name; e.g. geom
 *						3: Column SRID; e.g. 4326 [NEVER USED IN SQL SERVER, set during WKT conversion]
 *						4: Spatial geometry type: e.g. POINT, MULTIPOLYGON [NEVER USED IN SQL SERVER]
 *                      5: Schema (rif_data. or "")
 *
 * Description:			Add *** geometry *** column to table
 * Note:				%% becomes % after substitution
 */
ALTER TABLE rif_data.geometry_sahsuland ADD geom geometry;
GO

-- SQL statement 54: Add bbox geometry column >>>
/*
 * SQL statement name: 	add_geometry_column2.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. geometry_cb_2014_us_500k
 *						2: column name; e.g. geom
 *						3: Column SRID; e.g. 4326 [NEVER USED IN SQL SERVER, set during WKT conversion]
 *						4: Spatial geometry type: e.g. POINT, MULTIPOLYGON [NEVER USED IN SQL SERVER]
 *                      5: Schema (rif_data. or "")
 *
 * Description:			Add *** geometry *** column to table
 * Note:				%% becomes % after substitution
 */
ALTER TABLE rif_data.geometry_sahsuland ADD bbox geometry;
GO

-- SQL statement 55: Comment geometry table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geometry_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geometry_sahsuland';
SELECT @columnName  = 'bbox';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Bounding box', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geometry_sahsuland',
		@level2type = N'Column', @level2name = 'bbox'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Bounding box', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geometry_sahsuland',
		@level2type = N'Column', @level2name = 'bbox';
GO

-- SQL statement 56: Comment geometry table >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_table.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. cb_2014_us_county_500k
 *						2: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geometry_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geometry_sahsuland';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name]     = N'MS_Description'
		   AND [minor_id] = 0)
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'All geolevels geometry combined into a single table for a single geography', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geometry_sahsuland'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'All geolevels geometry combined into a single table for a single geography', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geometry_sahsuland';
GO

-- SQL statement 57: Comment geometry table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geometry_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geometry_sahsuland';
SELECT @columnName  = 'geolevel_id';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'ID for ordering (1=lowest resolution). Up to 99 supported.', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geometry_sahsuland',
		@level2type = N'Column', @level2name = 'geolevel_id'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'ID for ordering (1=lowest resolution). Up to 99 supported.', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geometry_sahsuland',
		@level2type = N'Column', @level2name = 'geolevel_id';
GO

-- SQL statement 58: Comment geometry table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geometry_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geometry_sahsuland';
SELECT @columnName  = 'zoomlevel';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Zoom level: 0 to maxoomlevel (11). Number of tiles is 2**<zoom level> * 2**<zoom level>; i.e. 1, 2x2, 4x4 ... 2048x2048 at zoomlevel 11', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geometry_sahsuland',
		@level2type = N'Column', @level2name = 'zoomlevel'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Zoom level: 0 to maxoomlevel (11). Number of tiles is 2**<zoom level> * 2**<zoom level>; i.e. 1, 2x2, 4x4 ... 2048x2048 at zoomlevel 11', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geometry_sahsuland',
		@level2type = N'Column', @level2name = 'zoomlevel';
GO

-- SQL statement 59: Comment geometry table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geometry_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geometry_sahsuland';
SELECT @columnName  = 'areaid';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Area ID.', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geometry_sahsuland',
		@level2type = N'Column', @level2name = 'areaid'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Area ID.', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geometry_sahsuland',
		@level2type = N'Column', @level2name = 'areaid';
GO

-- SQL statement 60: Comment geometry table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geometry_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geometry_sahsuland';
SELECT @columnName  = 'geom';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Geometry data in SRID 4326 (WGS84).', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geometry_sahsuland',
		@level2type = N'Column', @level2name = 'geom'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Geometry data in SRID 4326 (WGS84).', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geometry_sahsuland',
		@level2type = N'Column', @level2name = 'geom';
GO

--
-- Load geometry table
--

-- SQL statement 62: Add WKT column >>>
/*
 * SQL statement name: 	add_column.sql
 * Type:				Common SQL
 * Parameters:
 *						1: Table name; e.g. geometry_usa_2014
 *						2: column name; e.g. wkt
 *						3: Column datatype; e.g. Text or VARCHAR(MAX)
 *
 * Description:			Add column to table
 * Note:				% becomes % after substitution
 */
ALTER TABLE rif_data.geometry_sahsuland
  ADD WKT VARCHAR(MAX);
GO

-- SQL statement 63: Comment geometry WKT column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geometry_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geometry_sahsuland';
SELECT @columnName  = 'wkt';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Well known text', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geometry_sahsuland',
		@level2type = N'Column', @level2name = 'wkt'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Well known text', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geometry_sahsuland',
		@level2type = N'Column', @level2name = 'wkt';
GO

-- SQL statement 64: Create load geometry view >>>
CREATE VIEW rif_data.v_geometry_sahsuland
AS
SELECT geolevel_id,areaid,zoomlevel,wkt
  FROM rif_data.geometry_sahsuland;
GO

-- SQL statement 65: Load DB dependent geometry table from CSV file >>>
BULK INSERT rif_data.v_geometry_sahsuland
FROM '$(pwd)\mssql_geometry_sahsuland.csv'	-- Note use of pwd; set via -v pwd="%cd%" in the sqlcmd command line
WITH
(
	FORMATFILE = '$(pwd)\mssql_geometry_sahsuland.fmt',	-- Use a format file
	TABLOCK					-- Table lock
);
GO

-- SQL statement 66: Drop load geometry view >>>
DROP VIEW rif_data.v_geometry_sahsuland;
GO

-- SQL statement 67: Add WKT column >>>
/*
 * SQL statement name: 	update_geometry.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. geometry_usa_2014
 *						2: srid; e.g. 4326
 *
 * Description:			Update geometry column in table
 * Note:				% becomes % after substitution
 */
UPDATE rif_data.geometry_sahsuland
   SET geom = Geometry::STGeomFromText(wkt, 4326);
GO

--
-- No partitioning on SQL Server as it requires an Enterprise license; which
--

--
-- means you have to do it yourself using the generated scripts as a start.
--

-- SQL statement 70: Add primary key >>>
ALTER TABLE rif_data.geometry_sahsuland ADD PRIMARY KEY (geolevel_id, areaid, zoomlevel);
GO

-- SQL statement 71: Create spatial index on geom >>>
/*
 * SQL statement name: 	create_spatial_geometry_index.sql
 * Type:				MS SQL Server SQL statement
 * Parameters:
 *						1: index name;e.g. geometry_cb_2014_us_500k_gix
 *						2: table name; e.g. geometry_cb_2014_us_500k
 *						3: Geometry field name; e.g. geom
 *						4: Xmin (4326); e.g. -179.13729006727 
 *						5: Ymin (4326); e.g. -14.3737802873213 
 *						6: Xmax (4326); e.g.  179.773803959804  
 *						7: Ymax (4326); e.g. 71.352561 
 *
 * Description:			Create geometry table
 * Note:				% becomes % after substitution
 */
CREATE SPATIAL INDEX geometry_sahsuland_gix ON rif_data.geometry_sahsuland (geom)
	WITH ( BOUNDING_BOX = (xmin=-7.546294616103237, ymin=52.66328216508047, xmax=-5.036247072101617, ymax=55.56628680089157));
GO

-- SQL statement 72: Create spatial index on bbox >>>
/*
 * SQL statement name: 	create_spatial_geometry_index.sql
 * Type:				MS SQL Server SQL statement
 * Parameters:
 *						1: index name;e.g. geometry_cb_2014_us_500k_gix
 *						2: table name; e.g. geometry_cb_2014_us_500k
 *						3: Geometry field name; e.g. geom
 *						4: Xmin (4326); e.g. -179.13729006727 
 *						5: Ymin (4326); e.g. -14.3737802873213 
 *						6: Xmax (4326); e.g.  179.773803959804  
 *						7: Ymax (4326); e.g. 71.352561 
 *
 * Description:			Create geometry table
 * Note:				% becomes % after substitution
 */
CREATE SPATIAL INDEX geometry_sahsuland_gix2 ON rif_data.geometry_sahsuland (bbox)
	WITH ( BOUNDING_BOX = (xmin=-7.546294616103237, ymin=52.66328216508047, xmax=-5.036247072101617, ymax=55.56628680089157));
GO

-- SQL statement 73: Analyze table >>>
UPDATE STATISTICS rif_data.geometry_sahsuland;
GO

--
-- Adjacency table
--

-- SQL statement 75: Drop table adjacency_sahsuland >>>
IF OBJECT_ID('rif_data.adjacency_sahsuland', 'U') IS NOT NULL DROP TABLE rif_data.adjacency_sahsuland;
GO

-- SQL statement 76: Create table adjacency_sahsuland >>>
/*
 * SQL statement name: 	create_adjacency_table.sql
 * Type:				Common SQL statement
 * Parameters:
 *						1: adjacency table; e.g. adjacency_cb_2014_us_500k
 *						2: schema; e.g.rif_data. or ""
 *
 * Description:			Create adjacency table
 * Note:				% becomes % after substitution
 */
CREATE TABLE rif_data.adjacency_sahsuland (
	geolevel_id		INTEGER			NOT NULL,
	areaid			VARCHAR(200)	NOT NULL,
	num_adjacencies INTEGER			NOT NULL,
	adjacency_list	VARCHAR(8000)	NOT NULL,
	CONSTRAINT adjacency_sahsuland_pk PRIMARY KEY (geolevel_id, areaid)
);
GO

-- SQL statement 77: Comment table: adjacency_sahsuland >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_table.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. cb_2014_us_county_500k
 *						2: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.adjacency_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).adjacency_sahsuland';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name]     = N'MS_Description'
		   AND [minor_id] = 0)
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Adjacency lookup table for SAHSU Example geography', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'adjacency_sahsuland'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Adjacency lookup table for SAHSU Example geography', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'adjacency_sahsuland';
GO

-- SQL statement 78: Comment column: adjacency_sahsuland.geolevel_id >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.adjacency_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).adjacency_sahsuland';
SELECT @columnName  = 'geolevel_id';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'ID for ordering (1=lowest resolution). Up to 99 supported.', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'adjacency_sahsuland',
		@level2type = N'Column', @level2name = 'geolevel_id'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'ID for ordering (1=lowest resolution). Up to 99 supported.', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'adjacency_sahsuland',
		@level2type = N'Column', @level2name = 'geolevel_id';
GO

-- SQL statement 79: Comment column: adjacency_sahsuland.areaid >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.adjacency_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).adjacency_sahsuland';
SELECT @columnName  = 'areaid';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Area Id', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'adjacency_sahsuland',
		@level2type = N'Column', @level2name = 'areaid'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Area Id', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'adjacency_sahsuland',
		@level2type = N'Column', @level2name = 'areaid';
GO

-- SQL statement 80: Comment column: adjacency_sahsuland.num_adjacencies >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.adjacency_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).adjacency_sahsuland';
SELECT @columnName  = 'num_adjacencies';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Number of adjacencies', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'adjacency_sahsuland',
		@level2type = N'Column', @level2name = 'num_adjacencies'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Number of adjacencies', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'adjacency_sahsuland',
		@level2type = N'Column', @level2name = 'num_adjacencies';
GO

-- SQL statement 81: Comment column: adjacency_sahsuland.adjacency_list >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.adjacency_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).adjacency_sahsuland';
SELECT @columnName  = 'adjacency_list';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Adjacent area Ids', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'adjacency_sahsuland',
		@level2type = N'Column', @level2name = 'adjacency_list'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Adjacent area Ids', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'adjacency_sahsuland',
		@level2type = N'Column', @level2name = 'adjacency_list';
GO

-- SQL statement 82: Drop function sahsuland_GetAdjacencyMatrix() >>>
/*
 * SQL statement name: 	drop_GetAdjacencyMatrix.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: geography; e.g. cb_2014_us_500k
 *
 * Description:			Drop <geography>_GetAdjacencyMatrix() function
 * Note:				% becomes % after substitution
 */ 
IF EXISTS (SELECT *
             FROM sys.objects
            WHERE object_id = OBJECT_ID(N'[rif40].[sahsuland_GetAdjacencyMatrix]')
              AND type IN ( N'TF' )) /*  SQL table-valued-function */
	DROP FUNCTION [rif40].[sahsuland_GetAdjacencyMatrix];
GO

-- SQL statement 83: Create function sahsuland_GetAdjacencyMatrix() >>>
/*
 * SQL statement name: 	create_GetAdjacencyMatrix.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: geography; e.g. cb_2014_us_500k
 *						2: adjacency table; e.g. adjacency_cb_2014_us_500k
 *
 * Description:			Create <geography>_GetAdjacencyMatrix() function
 * Note:				% becomes % after substitution
 *
 * DECLARE @study_id INTEGER=[rif40].[rif40_sequence_current_value] ('rif40.rif40_study_id_seq') -* Get current sequence *-;
 * SELECT TOP 10 SUBSTRING(areaid, 1, 20) AS areaid, num_adjacencies, SUBSTRING(adjacency_list, 1, 90) AS adjacency_list_truncated
 *  FROM [rif40].[sahsuland_GetAdjacencyMatrix](@study_id);
 * GO
 */
CREATE FUNCTION [rif40].[sahsuland_GetAdjacencyMatrix](@study_id INTEGER)
RETURNS @rtnTable TABLE 
(
--
--  Columns returned by the function
--
	geolevel_id		INTEGER			NOT NULL,
	areaid			VARCHAR(200)	NOT NULL,
	num_adjacencies INTEGER			NOT NULL,
	adjacency_list	VARCHAR(8000)	NOT NULL
)
AS
BEGIN		   
--
	WITH b AS ( /* Tilemaker: has adjacency table */
		SELECT b1.area_id, b3.geolevel_id
		  FROM [rif40].[rif40_study_areas] b1, [rif40].[rif40_studies] b2, [rif40].[rif40_geolevels] b3
		 WHERE b1.study_id  = @study_id
		   AND b1.study_id  = b2.study_id	    
		   AND b2.geography = b3.geography
	)
	INSERT INTO @rtnTable(geolevel_id, areaid, num_adjacencies, adjacency_list)
	SELECT c1.geolevel_id, c1.areaid, c1.num_adjacencies, c1.adjacency_list
	  FROM [rif_data].[adjacency_sahsuland] c1, b
	 WHERE c1.geolevel_id   = b.geolevel_id
	   AND c1.areaid        = b.area_id;  
--
	RETURN;
END;
GO

-- SQL statement 84: Grant function sahsuland_GetAdjacencyMatrix() >>>
/*
 * SQL statement name: 	grant_function.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: function; e.g. adjacency_GetAdjacencyMatrix
 *
 * Description:			Create <geography>_GetAdjacencyMatrix() function
 * Note:				% becomes % after substitution
 */
GRANT SELECT, REFERENCES ON [rif40].[sahsuland_GetAdjacencyMatrix] TO rif_user, rif_manager;
GO

--
-- Load adjacency table
--

-- SQL statement 86: Load DB dependent adjacency table from CSV file >>>
BULK INSERT rif_data.adjacency_sahsuland
FROM '$(pwd)\mssql_adjacency_sahsuland.csv'	-- Note use of pwd; set via -v pwd="%cd%" in the sqlcmd command line
WITH
(
	FORMATFILE = '$(pwd)\mssql_adjacency_sahsuland.fmt',		-- Use a format file
	TABLOCK					-- Table lock
);
GO

-- SQLCMD statement 87: Set comment schema path to rif_data >>>
:SETVAR SchemaName @CurrentUser

-- SQL statement 88: Disable constraints: rif40_covariates_geolevel_fk on: rif40_covariates >>>
/*
 * SQL statement name: 	enable_disable_constraint.sql
 * Type:				MS SQL Server SQL statement
 * Parameters:
 *						1: Schema; e.g. rif40. or ""
 *						2: Table; e.g. rif40_covariates
 *						3: NOCHECK/CHECK (disable/enable)
 *						4: Constraint; e.g. rif40_covariates_geolevel_fk
 *
 * Description:			Enable or disable a constraint
 * Note:				% becomes % after substitution
 */
ALTER TABLE rif40.rif40_covariates NOCHECK CONSTRAINT rif40_covariates_geolevel_fk;
GO

-- SQL statement 89: Disable constraints: rif40_covariates_geog_fk on: rif40_covariates >>>
/*
 * SQL statement name: 	enable_disable_constraint.sql
 * Type:				MS SQL Server SQL statement
 * Parameters:
 *						1: Schema; e.g. rif40. or ""
 *						2: Table; e.g. rif40_covariates
 *						3: NOCHECK/CHECK (disable/enable)
 *						4: Constraint; e.g. rif40_covariates_geolevel_fk
 *
 * Description:			Enable or disable a constraint
 * Note:				% becomes % after substitution
 */
ALTER TABLE rif40.rif40_covariates NOCHECK CONSTRAINT rif40_covariates_geog_fk;
GO

-- SQL statement 90: Disable constraints: t_rif40_std_study_geolevel_fk on: t_rif40_studies >>>
/*
 * SQL statement name: 	enable_disable_constraint.sql
 * Type:				MS SQL Server SQL statement
 * Parameters:
 *						1: Schema; e.g. rif40. or ""
 *						2: Table; e.g. rif40_covariates
 *						3: NOCHECK/CHECK (disable/enable)
 *						4: Constraint; e.g. rif40_covariates_geolevel_fk
 *
 * Description:			Enable or disable a constraint
 * Note:				% becomes % after substitution
 */
ALTER TABLE rif40.t_rif40_studies NOCHECK CONSTRAINT t_rif40_std_study_geolevel_fk;
GO

-- SQL statement 91: Disable constraints: t_rif40_std_comp_geolevel_fk on: t_rif40_studies >>>
/*
 * SQL statement name: 	enable_disable_constraint.sql
 * Type:				MS SQL Server SQL statement
 * Parameters:
 *						1: Schema; e.g. rif40. or ""
 *						2: Table; e.g. rif40_covariates
 *						3: NOCHECK/CHECK (disable/enable)
 *						4: Constraint; e.g. rif40_covariates_geolevel_fk
 *
 * Description:			Enable or disable a constraint
 * Note:				% becomes % after substitution
 */
ALTER TABLE rif40.t_rif40_studies NOCHECK CONSTRAINT t_rif40_std_comp_geolevel_fk;
GO

-- SQL statement 92: Disable constraints: t_rif40_studies_geography_fk on: t_rif40_studies >>>
/*
 * SQL statement name: 	enable_disable_constraint.sql
 * Type:				MS SQL Server SQL statement
 * Parameters:
 *						1: Schema; e.g. rif40. or ""
 *						2: Table; e.g. rif40_covariates
 *						3: NOCHECK/CHECK (disable/enable)
 *						4: Constraint; e.g. rif40_covariates_geolevel_fk
 *
 * Description:			Enable or disable a constraint
 * Note:				% becomes % after substitution
 */
ALTER TABLE rif40.t_rif40_studies NOCHECK CONSTRAINT t_rif40_studies_geography_fk;
GO

-- SQL statement 93: Disable constraints: t_rif40_inv_cov_geography_fk on: t_rif40_inv_covariates >>>
/*
 * SQL statement name: 	enable_disable_constraint.sql
 * Type:				MS SQL Server SQL statement
 * Parameters:
 *						1: Schema; e.g. rif40. or ""
 *						2: Table; e.g. rif40_covariates
 *						3: NOCHECK/CHECK (disable/enable)
 *						4: Constraint; e.g. rif40_covariates_geolevel_fk
 *
 * Description:			Enable or disable a constraint
 * Note:				% becomes % after substitution
 */
ALTER TABLE rif40.t_rif40_inv_covariates NOCHECK CONSTRAINT t_rif40_inv_cov_geography_fk;
GO

-- SQL statement 94: Disable constraints: t_rif40_inv_cov_geolevel_fk on: t_rif40_inv_covariates >>>
/*
 * SQL statement name: 	enable_disable_constraint.sql
 * Type:				MS SQL Server SQL statement
 * Parameters:
 *						1: Schema; e.g. rif40. or ""
 *						2: Table; e.g. rif40_covariates
 *						3: NOCHECK/CHECK (disable/enable)
 *						4: Constraint; e.g. rif40_covariates_geolevel_fk
 *
 * Description:			Enable or disable a constraint
 * Note:				% becomes % after substitution
 */
ALTER TABLE rif40.t_rif40_inv_covariates NOCHECK CONSTRAINT t_rif40_inv_cov_geolevel_fk;
GO

-- SQL statement 95: Remove old geolevels meta data table >>>
DELETE FROM t_rif40_geolevels WHERE geography = 'SAHSULAND';
GO

-- SQL statement 96: Remove old geography meta data table >>>
DELETE FROM rif40_geographies WHERE geography = 'SAHSULAND';
GO

-- SQL statement 97: Setup geography meta data table column: geometrytable >>>
/*
 * SQL statement name: 	add_column.sql
 * Type:				Microsoft SQL Server SQL statement
 * Parameters:
 *						1: Table name; e.g. geometry_usa_2014
 *						2: column name; e.g. wkt
 *						3: Column datatype; e.g. Text or VARCHAR(MAX)
 *
 * Description:			Add column to table if it does not exist
 * Note:				% becomes % after substitution
 */
IF COL_LENGTH('rif40_geographies', 'geometrytable') IS NULL
BEGIN
    ALTER TABLE rif40_geographies ADD geometrytable VARCHAR(30);
END
;
GO

-- SQL statement 98: Comment geography meta data table columngeometrytable >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.rif40_geographies'
ELSE
	SELECT @tableName = '$(SchemaName).rif40_geographies';
SELECT @columnName  = 'geometrytable';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Geometry table name', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'rif40_geographies',
		@level2type = N'Column', @level2name = 'geometrytable'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Geometry table name', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'rif40_geographies',
		@level2type = N'Column', @level2name = 'geometrytable';
GO

-- SQL statement 99: Setup geography meta data table column: tiletable >>>
/*
 * SQL statement name: 	add_column.sql
 * Type:				Microsoft SQL Server SQL statement
 * Parameters:
 *						1: Table name; e.g. geometry_usa_2014
 *						2: column name; e.g. wkt
 *						3: Column datatype; e.g. Text or VARCHAR(MAX)
 *
 * Description:			Add column to table if it does not exist
 * Note:				% becomes % after substitution
 */
IF COL_LENGTH('rif40_geographies', 'tiletable') IS NULL
BEGIN
    ALTER TABLE rif40_geographies ADD tiletable VARCHAR(30);
END
;
GO

-- SQL statement 100: Comment geography meta data table columntiletable >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.rif40_geographies'
ELSE
	SELECT @tableName = '$(SchemaName).rif40_geographies';
SELECT @columnName  = 'tiletable';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Tile table name', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'rif40_geographies',
		@level2type = N'Column', @level2name = 'tiletable'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Tile table name', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'rif40_geographies',
		@level2type = N'Column', @level2name = 'tiletable';
GO

-- SQL statement 101: Setup geography meta data table column: minzoomlevel >>>
/*
 * SQL statement name: 	add_column.sql
 * Type:				Microsoft SQL Server SQL statement
 * Parameters:
 *						1: Table name; e.g. geometry_usa_2014
 *						2: column name; e.g. wkt
 *						3: Column datatype; e.g. Text or VARCHAR(MAX)
 *
 * Description:			Add column to table if it does not exist
 * Note:				% becomes % after substitution
 */
IF COL_LENGTH('rif40_geographies', 'minzoomlevel') IS NULL
BEGIN
    ALTER TABLE rif40_geographies ADD minzoomlevel INTEGER;
END
;
GO

-- SQL statement 102: Comment geography meta data table columnminzoomlevel >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.rif40_geographies'
ELSE
	SELECT @tableName = '$(SchemaName).rif40_geographies';
SELECT @columnName  = 'minzoomlevel';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Minimum zoomlevel', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'rif40_geographies',
		@level2type = N'Column', @level2name = 'minzoomlevel'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Minimum zoomlevel', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'rif40_geographies',
		@level2type = N'Column', @level2name = 'minzoomlevel';
GO

-- SQL statement 103: Setup geography meta data table column: maxzoomlevel >>>
/*
 * SQL statement name: 	add_column.sql
 * Type:				Microsoft SQL Server SQL statement
 * Parameters:
 *						1: Table name; e.g. geometry_usa_2014
 *						2: column name; e.g. wkt
 *						3: Column datatype; e.g. Text or VARCHAR(MAX)
 *
 * Description:			Add column to table if it does not exist
 * Note:				% becomes % after substitution
 */
IF COL_LENGTH('rif40_geographies', 'maxzoomlevel') IS NULL
BEGIN
    ALTER TABLE rif40_geographies ADD maxzoomlevel INTEGER;
END
;
GO

-- SQL statement 104: Comment geography meta data table columnmaxzoomlevel >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.rif40_geographies'
ELSE
	SELECT @tableName = '$(SchemaName).rif40_geographies';
SELECT @columnName  = 'maxzoomlevel';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Maximum zoomlevel', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'rif40_geographies',
		@level2type = N'Column', @level2name = 'maxzoomlevel'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Maximum zoomlevel', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'rif40_geographies',
		@level2type = N'Column', @level2name = 'maxzoomlevel';
GO

-- SQL statement 105: Setup geography meta data table column: adjacencytable >>>
/*
 * SQL statement name: 	add_column.sql
 * Type:				Microsoft SQL Server SQL statement
 * Parameters:
 *						1: Table name; e.g. geometry_usa_2014
 *						2: column name; e.g. wkt
 *						3: Column datatype; e.g. Text or VARCHAR(MAX)
 *
 * Description:			Add column to table if it does not exist
 * Note:				% becomes % after substitution
 */
IF COL_LENGTH('rif40_geographies', 'adjacencytable') IS NULL
BEGIN
    ALTER TABLE rif40_geographies ADD adjacencytable VARCHAR(30);
END
;
GO

-- SQL statement 106: Comment geography meta data table columnadjacencytable >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.rif40_geographies'
ELSE
	SELECT @tableName = '$(SchemaName).rif40_geographies';
SELECT @columnName  = 'adjacencytable';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Adjacency table', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'rif40_geographies',
		@level2type = N'Column', @level2name = 'adjacencytable'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Adjacency table', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'rif40_geographies',
		@level2type = N'Column', @level2name = 'adjacencytable';
GO

-- SQL statement 107: Setup geolevels meta data table column: areaid_count >>>
/*
 * SQL statement name: 	add_column.sql
 * Type:				Microsoft SQL Server SQL statement
 * Parameters:
 *						1: Table name; e.g. geometry_usa_2014
 *						2: column name; e.g. wkt
 *						3: Column datatype; e.g. Text or VARCHAR(MAX)
 *
 * Description:			Add column to table if it does not exist
 * Note:				% becomes % after substitution
 */
IF COL_LENGTH('t_rif40_geolevels', 'areaid_count') IS NULL
BEGIN
    ALTER TABLE t_rif40_geolevels ADD areaid_count INTEGER;
END
;
GO

-- SQL statement 108: Comment geolevels meta data table columnareaid_count >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.t_rif40_geolevels'
ELSE
	SELECT @tableName = '$(SchemaName).t_rif40_geolevels';
SELECT @columnName  = 'areaid_count';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Area ID count', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 't_rif40_geolevels',
		@level2type = N'Column', @level2name = 'areaid_count'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Area ID count', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 't_rif40_geolevels',
		@level2type = N'Column', @level2name = 'areaid_count';
GO

-- SQL statement 109: Recreate rif40_geolevels view with new columns >>>
/*
 * SQL statement name: 	rif40_geolevels_view.sql
 * Type:				MS SQL Server SQL
 * Parameters:			NONE
 *
 * Description:			Recreate rif40_geolevels
 * Note:				% becomes % after substitution
 */
DROP VIEW [rif40].[rif40_geolevels]
GO

CREATE VIEW [rif40].[rif40_geolevels] AS 
 SELECT a.geography,
    a.geolevel_name,
    a.geolevel_id,
    a.description,
    a.lookup_table,
    a.lookup_desc_column,
    a.shapefile,
    a.centroidsfile,
    a.shapefile_table,
    a.shapefile_area_id_column,
    a.shapefile_desc_column,
    a.centroids_table,
    a.centroids_area_id_column,
    a.avg_npoints_geom,
    a.avg_npoints_opt,
    a.file_geojson_len,
    a.leg_geom,
    a.leg_opt,
    a.covariate_table,
    a.resolution,
    a.comparea,
    a.listing,
    a.restricted,
    a.centroidxcoordinate_column,
    a.centroidycoordinate_column,
	a.areaid_count
   FROM [rif40].[t_rif40_geolevels] a
  WHERE IS_MEMBER(N'[rif_student]') = 1 AND a.restricted <> 1
UNION
 SELECT a.geography,
    a.geolevel_name,
    a.geolevel_id,
    a.description,
    a.lookup_table,
    a.lookup_desc_column,
    a.shapefile,
    a.centroidsfile,
    a.shapefile_table,
    a.shapefile_area_id_column,
    a.shapefile_desc_column,
    a.centroids_table,
    a.centroids_area_id_column,
    a.avg_npoints_geom,
    a.avg_npoints_opt,
    a.file_geojson_len,
    a.leg_geom,
    a.leg_opt,
    a.covariate_table,
    a.resolution,
    a.comparea,
    a.listing,
    a.restricted,
    a.centroidxcoordinate_column,
    a.centroidycoordinate_column,
	a.areaid_count
   FROM [rif40].[t_rif40_geolevels] a
  WHERE IS_MEMBER(N'[rif_student]') IS NULL

GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', 
	@value=N'Geography (e.g EW2001)' , 
	@level0type=N'SCHEMA',@level0name=N'rif40', @level1type=N'VIEW',@level1name=N'rif40_geolevels', 
	@level2type=N'COLUMN',@level2name=N'geography'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', 
	@value=N'Name of geolevel. This will be a column name in the numerator/denominator tables' , 
	@level0type=N'SCHEMA',@level0name=N'rif40', @level1type=N'VIEW',@level1name=N'rif40_geolevels', 
	@level2type=N'COLUMN',@level2name=N'geolevel_name'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', 
	@value=N'ID for ordering (1=lowest resolution). Up to 99 supported.' , 
	@level0type=N'SCHEMA',@level0name=N'rif40', @level1type=N'VIEW',@level1name=N'rif40_geolevels', 
	@level2type=N'COLUMN',@level2name=N'geolevel_id'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', 
	@value=N'Description' , 
	@level0type=N'SCHEMA',@level0name=N'rif40', 
	@level1type=N'VIEW',@level1name=N'rif40_geolevels', @level2type=N'COLUMN',@level2name=N'description'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', 
	@value=N'Lookup table name. This is used to translate codes to the common names, e.g a LADUA of 00BK is &quot;Westminster&quot;' , 
	@level0type=N'SCHEMA',@level0name=N'rif40', @level1type=N'VIEW',@level1name=N'rif40_geolevels', 
	@level2type=N'COLUMN',@level2name=N'lookup_table'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', 
	@value=N'Lookup table description column name.' , 
	@level0type=N'SCHEMA',@level0name=N'rif40', @level1type=N'VIEW',@level1name=N'rif40_geolevels', 
	@level2type=N'COLUMN',@level2name=N'lookup_desc_column'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', 
	@value=N'Location of the GIS shape file. NULL if PostGress/PostGIS used. Can also use SHAPEFILE_GEOMETRY instead.' , 
	@level0type=N'SCHEMA',@level0name=N'rif40', @level1type=N'VIEW',@level1name=N'rif40_geolevels', 
	@level2type=N'COLUMN',@level2name=N'shapefile'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', 
	@value=N'Location of the GIS centroids file. Can also use CENTROIDXCOORDINATE_COLUMN, CENTROIDYCOORDINATE_COLUMN instead.' , 
	@level0type=N'SCHEMA',@level0name=N'rif40', @level1type=N'VIEW',@level1name=N'rif40_geolevels', 
	@level2type=N'COLUMN',@level2name=N'centroidsfile'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', 
	@value=N'Table containing GIS shape file data (created using shp2pgsql).' , 
	@level0type=N'SCHEMA',@level0name=N'rif40', @level1type=N'VIEW',@level1name=N'rif40_geolevels', 
	@level2type=N'COLUMN',@level2name=N'shapefile_table'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', 
	@value=N'Column containing the AREA_IDs in SHAPEFILE_TABLE' , 
	@level0type=N'SCHEMA',@level0name=N'rif40', @level1type=N'VIEW',@level1name=N'rif40_geolevels', 
	@level2type=N'COLUMN',@level2name=N'shapefile_area_id_column'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', 
	@value=N'Column containing the AREA_ID descriptions in SHAPEFILE_TABLE' , 
	@level0type=N'SCHEMA',@level0name=N'rif40', @level1type=N'VIEW',@level1name=N'rif40_geolevels', 
	@level2type=N'COLUMN',@level2name=N'shapefile_desc_column'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', 
	@value=N'Table containing GIS shape file data with Arc GIS calculated population weighted centroids (created using shp2pgsql). PostGIS does not support population weighted centroids.' , 
	@level0type=N'SCHEMA',@level0name=N'rif40', @level1type=N'VIEW',@level1name=N'rif40_geolevels', 
	@level2type=N'COLUMN',@level2name=N'centroids_table'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', 
	@value=N'Column containing the AREA_IDs in CENTROIDS_TABLE. X and Y co-ordinates ciolumns are asummed to be named after CENTROIDXCOORDINATE_COLUMN and CENTROIDYCOORDINATE_COLUMN.' , 
	@level0type=N'SCHEMA',@level0name=N'rif40', @level1type=N'VIEW',@level1name=N'rif40_geolevels', 
	@level2type=N'COLUMN',@level2name=N'centroids_area_id_column'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', 
	@value=N'Average number of points in a geometry object (AREA_ID). Used to evaluation the impact of ST_SIMPLIFY_TOLERANCE.' , 
	@level0type=N'SCHEMA',@level0name=N'rif40', @level1type=N'VIEW',@level1name=N'rif40_geolevels', 
	@level2type=N'COLUMN',@level2name=N'avg_npoints_geom'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', 
	@value=N'Average number of points in a ST_SimplifyPreserveTopology() optimsed geometry object (AREA_ID). Used to evaluation the impact of ST_SIMPLIFY_TOLERANCE.' , 
	@level0type=N'SCHEMA',@level0name=N'rif40', @level1type=N'VIEW',@level1name=N'rif40_geolevels', 
	@level2type=N'COLUMN',@level2name=N'avg_npoints_opt'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', 
	@value=N'File length estimate (in bytes) for conversion of the entire geolevel geometry to GeoJSON. Used to evaluation the impact of ST_SIMPLIFY_TOLERANCE.' , 
	@level0type=N'SCHEMA',@level0name=N'rif40', @level1type=N'VIEW',@level1name=N'rif40_geolevels', 
	@level2type=N'COLUMN',@level2name=N'file_geojson_len'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', 
	@value=N'The average length (in projection units - usually metres) of a vector leg. Used to evaluation the impact of ST_SIMPLIFY_TOLERANCE.' , 
	@level0type=N'SCHEMA',@level0name=N'rif40', @level1type=N'VIEW',@level1name=N'rif40_geolevels', 
	@level2type=N'COLUMN',@level2name=N'leg_geom'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', 
	@value=N'The average length (in projection units - usually metres) of a ST_SimplifyPreserveTopology() optimsed geometryvector leg. Used to evaluation the impact of ST_SIMPLIFY_TOLERANCE.' , 
	@level0type=N'SCHEMA',@level0name=N'rif40', @level1type=N'VIEW',@level1name=N'rif40_geolevels', 
	@level2type=N'COLUMN',@level2name=N'leg_opt'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', 
	@value=N'Name of table used for covariates at this geolevel' , 
	@level0type=N'SCHEMA',@level0name=N'rif40', @level1type=N'VIEW',@level1name=N'rif40_geolevels', 
	@level2type=N'COLUMN',@level2name=N'covariate_table'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', 
	@value=N'Can use a map for selection at this resolution (0/1)' , 
	@level0type=N'SCHEMA',@level0name=N'rif40', @level1type=N'VIEW',@level1name=N'rif40_geolevels', 
	@level2type=N'COLUMN',@level2name=N'resolution'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', 
	@value=N'Able to be used as a comparison area (0/1)' , 
	@level0type=N'SCHEMA',@level0name=N'rif40', @level1type=N'VIEW',@level1name=N'rif40_geolevels', 
	@level2type=N'COLUMN',@level2name=N'comparea'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', 
	@value=N'Able to be used in a disease map listing (0/1)' , 
	@level0type=N'SCHEMA',@level0name=N'rif40', @level1type=N'VIEW',@level1name=N'rif40_geolevels', 
	@level2type=N'COLUMN',@level2name=N'listing'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', 
	@value=N'Is geolevel access rectricted by Inforamtion Governance restrictions (0/1). If 1 (Yes) then a) students cannot access this geolevel and b) if the system parameter ExtractControl=1 then the user must be granted permission by a RIF_MANAGER to extract from the database the results, data extract and maps tables. This is enforced by the RIF application.' , 
	@level0type=N'SCHEMA',@level0name=N'rif40', @level1type=N'VIEW',@level1name=N'rif40_geolevels', 
	@level2type=N'COLUMN',@level2name=N'restricted'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', 
	@value=N'Lookup table centroid X co-ordinate column name. Can also use CENTROIDSFILE instead.' , 
	@level0type=N'SCHEMA',@level0name=N'rif40', @level1type=N'VIEW',@level1name=N'rif40_geolevels', 
	@level2type=N'COLUMN',@level2name=N'centroidxcoordinate_column'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', 
	@value=N'Lookup table centroid Y co-ordinate column name.' , 
	@level0type=N'SCHEMA',@level0name=N'rif40', @level1type=N'VIEW',@level1name=N'rif40_geolevels', 
	@level2type=N'COLUMN',@level2name=N'centroidycoordinate_column'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', 
	@value=N'Geolevels: hierarchy of level with a geography. Use this table for INSERT/UPDATE/DELETE; use RIF40_GEOLEVELS for SELECT. In RIF40_GEOLEVELS if the user has the RIF_STUDENT role the geolevels are restricted to LADUA/DISTRICT level resolution or lower.' , 
	@level0type=N'SCHEMA',@level0name=N'rif40', @level1type=N'VIEW',@level1name=N'rif40_geolevels'
GO

EXEC sys.sp_addextendedproperty @name=N'MS_Description', 
	@value=N'Area ID count' , @level0type=N'SCHEMA',@level0name=N'rif40', @level1type=N'VIEW',@level1name=N'rif40_geolevels', 
	@level2type=N'COLUMN',@level2name=N'areaid_count'
GO

GRANT SELECT ON rif40_geolevels TO rif_user, rif_manager;;
GO

-- SQLCMD statement 110: Set comment schema path to rif_data >>>
:SETVAR SchemaName "rif_data"

-- SQL statement 111: Populate geography meta data table >>>
/*
 * SQL statement name: 	insert_geography.sql
 * Type:				Common SQL statement
 * Parameters:
 *						1: table; e.g. GEOGRAPHY_CB_2014_US_COUNTY_500K
 *						2: geography; e.g. CB_2014_US_500K
 *						3: geography description; e.g. United states to county level
 *						4: hierarchytable; e.g. HIERARCHY_CB_2014_US_500K
 *						5: geometrytable; e.g. GEOMETRY_CB_2014_US_500K
 *						6: tiletable; e.g. TILES_CB_2014_US_500K
 * 						7: SRID; e.g. 4269
 *						8: Default comparision area, e.g. GEOID
 *						9: Default study area, e.g. STATENS
 *						10: Min zoomlevel
 *						11: Max zoomlevel
 *           			12: Postal population table (quote enclosed or NULL)
 *      				13: Postal point column (quote enclosed or NULL)
 *						14: Partition (0/1)
 *						15: Max geojson digits
 *						16: adjacencytable; e.g. ADJACENCY_CB_2014_US_500K
 *
 * Description:			Insert into geography table
 * Note:				%% becomes % after substitution
 */
INSERT INTO rif40_geographies (
geography, description, hierarchytable, geometrytable, tiletable, adjacencytable, srid, defaultcomparea, defaultstudyarea, minzoomlevel, maxzoomlevel,
		postal_population_table, postal_point_column, partition, max_geojson_digits)
SELECT 'SAHSULAND' AS geography,
       'SAHSU Example geography' AS description,
       'HIERARCHY_SAHSULAND' AS hierarchytable,
	   'GEOMETRY_SAHSULAND' AS geometrytable,
	   'TILES_SAHSULAND' AS tiletable,
	   'ADJACENCY_SAHSULAND' AS adjacencytable,
       27700   AS srid,
       NULL AS defaultcomparea,	/* See: update_geography.sql */
       NULL AS defaultstudyarea,
	   6  AS minzoomlevel,
	   11  AS maxzoomlevel,
	   NULL  AS postal_population_table,
       NULL  AS postal_point_column,
       0  AS partition, 
       6  AS max_geojson_digits;
GO

-- SQL statement 112: Insert geolevels meta data for: sahsu_grd_level1 >>>
/*
 * SQL statement name: 	insert_geolevel.sql
 * Type:				Common SQL statement
 * Parameters:
 *						1: table; e.g. GEOLEVELS_CB_2014_US_COUNTY_500K
 *						2: geography; e.g. CB_2014_US_500K
 *						3: Geolevel name; e.g. CB_2014_US_COUNTY_500K
 *						4: Geolevel id; e.g. 3
 *						5: Geolevel description; e.g. "The State-County at a scale of 1:500,000"
 *						6: lookup table; e.g. LOOKUP_CB_2014_US_COUNTY_500K
 * 						7: shapefile; e.g. cb_2014_us_county_500k.shp
 *						8: shapefile table; e.g. CB_2014_US_COUNTY_500K
 *						9: covariate_table; e.g. CB_2014_US_500K_COVARIATES_CB_2014_US_COUNTY_500K
 *						10: shapefile_area_id_column; e.g. COUNTYNS
 *						11: shapefile_desc_column; e.g. NAME
 * 						12: lookup_desc_column; e.g. AREANAME
 *						13: resolution: Can use a map for selection at this resolution (0/1)
 *						14: comparea: Able to be used as a comparison area (0/1)
 *						15: listing: Able to be used in a disease map listing (0/1)
 *
 * Description:			Insert into geography table
 * Note:				%% becomes % after substitution
 */
INSERT INTO t_rif40_geolevels (
   geography, geolevel_name, geolevel_id, description, lookup_table,
   lookup_desc_column, shapefile, shapefile_table, shapefile_area_id_column, shapefile_desc_column,
   resolution, comparea, listing, covariate_table)
SELECT 'SAHSULAND' AS geography,
       'SAHSU_GRD_LEVEL1' AS geolevel_name,
       1 AS geolevel_id,
       'Level 1 (top level)' AS description,
       'LOOKUP_SAHSU_GRD_LEVEL1' AS lookup_table,
       'AREANAME' AS lookup_desc_column,
       'SAHSU_GRD_Level1.shp' AS shapefile,
       'SAHSU_GRD_LEVEL1' AS shapefile_table,
       'LEVEL1' AS shapefile_area_id_column,
       'LEVEL1' AS shapefile_desc_column,
       1 AS resolution,
       1 AS comparea,
       1 AS listing,
	   NULL AS covariate_table;
GO

-- SQL statement 113: Create (if required) geolevels covariate table for: sahsu_grd_level2 >>>
/*
 * SQL statement name: 	create_covariate_table.sql
 * Type:				Microsoft SQL Server SQL statement
 * Parameters:
 *						1: covariate_table; e.g. COV_CB_2014_US_STATE_500K
 *						2: Geolevel name: CB_2014_US_STATE_500K
 *						3: Schema; e.g. rif_data. or ""
 *
 * Description:			Create example covariate table if it does not exist
 * Note:				%% becomes % after substitution
 */
IF COL_LENGTH('rif_data.cov_SAHSU_GRD_Level2', 'sahsu_grd_level2') IS NULL
BEGIN
	 CREATE TABLE rif_data.cov_SAHSU_GRD_Level2 (
		year 	INTEGER 	NOT NULL,
		sahsu_grd_level2		VARCHAR(30)	NOT NULL,
		PRIMARY KEY (year, sahsu_grd_level2)
	 );
END
;
GO

-- SQL statement 114: Comment covariate table >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_table.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. cb_2014_us_county_500k
 *						2: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.cov_SAHSU_GRD_Level2'
ELSE
	SELECT @tableName = '$(SchemaName).cov_SAHSU_GRD_Level2';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name]     = N'MS_Description'
		   AND [minor_id] = 0)
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Example covariate table for: Level 2', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'cov_SAHSU_GRD_Level2'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Example covariate table for: Level 2', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'cov_SAHSU_GRD_Level2';
GO

-- SQL statement 115: Comment covariate year column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.cov_SAHSU_GRD_Level2'
ELSE
	SELECT @tableName = '$(SchemaName).cov_SAHSU_GRD_Level2';
SELECT @columnName  = 'year';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Year', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'cov_SAHSU_GRD_Level2',
		@level2type = N'Column', @level2name = 'year'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Year', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'cov_SAHSU_GRD_Level2',
		@level2type = N'Column', @level2name = 'year';
GO

-- SQL statement 116: Comment covariate year column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.cov_SAHSU_GRD_Level2'
ELSE
	SELECT @tableName = '$(SchemaName).cov_SAHSU_GRD_Level2';
SELECT @columnName  = 'sahsu_grd_level2';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Geolevel name', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'cov_SAHSU_GRD_Level2',
		@level2type = N'Column', @level2name = 'sahsu_grd_level2'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Geolevel name', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'cov_SAHSU_GRD_Level2',
		@level2type = N'Column', @level2name = 'sahsu_grd_level2';
GO

-- SQL statement 117: Insert geolevels meta data for: sahsu_grd_level2 >>>
/*
 * SQL statement name: 	insert_geolevel.sql
 * Type:				Common SQL statement
 * Parameters:
 *						1: table; e.g. GEOLEVELS_CB_2014_US_COUNTY_500K
 *						2: geography; e.g. CB_2014_US_500K
 *						3: Geolevel name; e.g. CB_2014_US_COUNTY_500K
 *						4: Geolevel id; e.g. 3
 *						5: Geolevel description; e.g. "The State-County at a scale of 1:500,000"
 *						6: lookup table; e.g. LOOKUP_CB_2014_US_COUNTY_500K
 * 						7: shapefile; e.g. cb_2014_us_county_500k.shp
 *						8: shapefile table; e.g. CB_2014_US_COUNTY_500K
 *						9: covariate_table; e.g. CB_2014_US_500K_COVARIATES_CB_2014_US_COUNTY_500K
 *						10: shapefile_area_id_column; e.g. COUNTYNS
 *						11: shapefile_desc_column; e.g. NAME
 * 						12: lookup_desc_column; e.g. AREANAME
 *						13: resolution: Can use a map for selection at this resolution (0/1)
 *						14: comparea: Able to be used as a comparison area (0/1)
 *						15: listing: Able to be used in a disease map listing (0/1)
 *
 * Description:			Insert into geography table
 * Note:				%% becomes % after substitution
 */
INSERT INTO t_rif40_geolevels (
   geography, geolevel_name, geolevel_id, description, lookup_table,
   lookup_desc_column, shapefile, shapefile_table, shapefile_area_id_column, shapefile_desc_column,
   resolution, comparea, listing, covariate_table)
SELECT 'SAHSULAND' AS geography,
       'SAHSU_GRD_LEVEL2' AS geolevel_name,
       2 AS geolevel_id,
       'Level 2' AS description,
       'LOOKUP_SAHSU_GRD_LEVEL2' AS lookup_table,
       'AREANAME' AS lookup_desc_column,
       'SAHSU_GRD_Level2.shp' AS shapefile,
       'SAHSU_GRD_LEVEL2' AS shapefile_table,
       'LEVEL2' AS shapefile_area_id_column,
       'NAME' AS shapefile_desc_column,
       1 AS resolution,
       1 AS comparea,
       1 AS listing,
	   'COV_SAHSU_GRD_LEVEL2' AS covariate_table;
GO

-- SQL statement 118: Create (if required) geolevels covariate table for: sahsu_grd_level3 >>>
/*
 * SQL statement name: 	create_covariate_table.sql
 * Type:				Microsoft SQL Server SQL statement
 * Parameters:
 *						1: covariate_table; e.g. COV_CB_2014_US_STATE_500K
 *						2: Geolevel name: CB_2014_US_STATE_500K
 *						3: Schema; e.g. rif_data. or ""
 *
 * Description:			Create example covariate table if it does not exist
 * Note:				%% becomes % after substitution
 */
IF COL_LENGTH('rif_data.cov_SAHSU_GRD_Level3', 'sahsu_grd_level3') IS NULL
BEGIN
	 CREATE TABLE rif_data.cov_SAHSU_GRD_Level3 (
		year 	INTEGER 	NOT NULL,
		sahsu_grd_level3		VARCHAR(30)	NOT NULL,
		PRIMARY KEY (year, sahsu_grd_level3)
	 );
END
;
GO

-- SQL statement 119: Comment covariate table >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_table.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. cb_2014_us_county_500k
 *						2: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.cov_SAHSU_GRD_Level3'
ELSE
	SELECT @tableName = '$(SchemaName).cov_SAHSU_GRD_Level3';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name]     = N'MS_Description'
		   AND [minor_id] = 0)
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Example covariate table for: Level 3', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'cov_SAHSU_GRD_Level3'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Example covariate table for: Level 3', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'cov_SAHSU_GRD_Level3';
GO

-- SQL statement 120: Comment covariate year column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.cov_SAHSU_GRD_Level3'
ELSE
	SELECT @tableName = '$(SchemaName).cov_SAHSU_GRD_Level3';
SELECT @columnName  = 'year';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Year', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'cov_SAHSU_GRD_Level3',
		@level2type = N'Column', @level2name = 'year'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Year', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'cov_SAHSU_GRD_Level3',
		@level2type = N'Column', @level2name = 'year';
GO

-- SQL statement 121: Comment covariate year column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.cov_SAHSU_GRD_Level3'
ELSE
	SELECT @tableName = '$(SchemaName).cov_SAHSU_GRD_Level3';
SELECT @columnName  = 'sahsu_grd_level3';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Geolevel name', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'cov_SAHSU_GRD_Level3',
		@level2type = N'Column', @level2name = 'sahsu_grd_level3'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Geolevel name', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'cov_SAHSU_GRD_Level3',
		@level2type = N'Column', @level2name = 'sahsu_grd_level3';
GO

-- SQL statement 122: Insert geolevels meta data for: sahsu_grd_level3 >>>
/*
 * SQL statement name: 	insert_geolevel.sql
 * Type:				Common SQL statement
 * Parameters:
 *						1: table; e.g. GEOLEVELS_CB_2014_US_COUNTY_500K
 *						2: geography; e.g. CB_2014_US_500K
 *						3: Geolevel name; e.g. CB_2014_US_COUNTY_500K
 *						4: Geolevel id; e.g. 3
 *						5: Geolevel description; e.g. "The State-County at a scale of 1:500,000"
 *						6: lookup table; e.g. LOOKUP_CB_2014_US_COUNTY_500K
 * 						7: shapefile; e.g. cb_2014_us_county_500k.shp
 *						8: shapefile table; e.g. CB_2014_US_COUNTY_500K
 *						9: covariate_table; e.g. CB_2014_US_500K_COVARIATES_CB_2014_US_COUNTY_500K
 *						10: shapefile_area_id_column; e.g. COUNTYNS
 *						11: shapefile_desc_column; e.g. NAME
 * 						12: lookup_desc_column; e.g. AREANAME
 *						13: resolution: Can use a map for selection at this resolution (0/1)
 *						14: comparea: Able to be used as a comparison area (0/1)
 *						15: listing: Able to be used in a disease map listing (0/1)
 *
 * Description:			Insert into geography table
 * Note:				%% becomes % after substitution
 */
INSERT INTO t_rif40_geolevels (
   geography, geolevel_name, geolevel_id, description, lookup_table,
   lookup_desc_column, shapefile, shapefile_table, shapefile_area_id_column, shapefile_desc_column,
   resolution, comparea, listing, covariate_table)
SELECT 'SAHSULAND' AS geography,
       'SAHSU_GRD_LEVEL3' AS geolevel_name,
       3 AS geolevel_id,
       'Level 3' AS description,
       'LOOKUP_SAHSU_GRD_LEVEL3' AS lookup_table,
       'AREANAME' AS lookup_desc_column,
       'SAHSU_GRD_Level3.shp' AS shapefile,
       'SAHSU_GRD_LEVEL3' AS shapefile_table,
       'LEVEL3' AS shapefile_area_id_column,
       'LEVEL3' AS shapefile_desc_column,
       1 AS resolution,
       1 AS comparea,
       1 AS listing,
	   'COV_SAHSU_GRD_LEVEL3' AS covariate_table;
GO

-- SQL statement 123: Create (if required) geolevels covariate table for: sahsu_grd_level4 >>>
/*
 * SQL statement name: 	create_covariate_table.sql
 * Type:				Microsoft SQL Server SQL statement
 * Parameters:
 *						1: covariate_table; e.g. COV_CB_2014_US_STATE_500K
 *						2: Geolevel name: CB_2014_US_STATE_500K
 *						3: Schema; e.g. rif_data. or ""
 *
 * Description:			Create example covariate table if it does not exist
 * Note:				%% becomes % after substitution
 */
IF COL_LENGTH('rif_data.cov_SAHSU_GRD_Level4', 'sahsu_grd_level4') IS NULL
BEGIN
	 CREATE TABLE rif_data.cov_SAHSU_GRD_Level4 (
		year 	INTEGER 	NOT NULL,
		sahsu_grd_level4		VARCHAR(30)	NOT NULL,
		PRIMARY KEY (year, sahsu_grd_level4)
	 );
END
;
GO

-- SQL statement 124: Comment covariate table >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_table.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. cb_2014_us_county_500k
 *						2: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.cov_SAHSU_GRD_Level4'
ELSE
	SELECT @tableName = '$(SchemaName).cov_SAHSU_GRD_Level4';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name]     = N'MS_Description'
		   AND [minor_id] = 0)
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Example covariate table for: Level 4', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'cov_SAHSU_GRD_Level4'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Example covariate table for: Level 4', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'cov_SAHSU_GRD_Level4';
GO

-- SQL statement 125: Comment covariate year column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.cov_SAHSU_GRD_Level4'
ELSE
	SELECT @tableName = '$(SchemaName).cov_SAHSU_GRD_Level4';
SELECT @columnName  = 'year';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Year', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'cov_SAHSU_GRD_Level4',
		@level2type = N'Column', @level2name = 'year'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Year', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'cov_SAHSU_GRD_Level4',
		@level2type = N'Column', @level2name = 'year';
GO

-- SQL statement 126: Comment covariate year column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.cov_SAHSU_GRD_Level4'
ELSE
	SELECT @tableName = '$(SchemaName).cov_SAHSU_GRD_Level4';
SELECT @columnName  = 'sahsu_grd_level4';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Geolevel name', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'cov_SAHSU_GRD_Level4',
		@level2type = N'Column', @level2name = 'sahsu_grd_level4'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Geolevel name', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'cov_SAHSU_GRD_Level4',
		@level2type = N'Column', @level2name = 'sahsu_grd_level4';
GO

-- SQL statement 127: Insert geolevels meta data for: sahsu_grd_level4 >>>
/*
 * SQL statement name: 	insert_geolevel.sql
 * Type:				Common SQL statement
 * Parameters:
 *						1: table; e.g. GEOLEVELS_CB_2014_US_COUNTY_500K
 *						2: geography; e.g. CB_2014_US_500K
 *						3: Geolevel name; e.g. CB_2014_US_COUNTY_500K
 *						4: Geolevel id; e.g. 3
 *						5: Geolevel description; e.g. "The State-County at a scale of 1:500,000"
 *						6: lookup table; e.g. LOOKUP_CB_2014_US_COUNTY_500K
 * 						7: shapefile; e.g. cb_2014_us_county_500k.shp
 *						8: shapefile table; e.g. CB_2014_US_COUNTY_500K
 *						9: covariate_table; e.g. CB_2014_US_500K_COVARIATES_CB_2014_US_COUNTY_500K
 *						10: shapefile_area_id_column; e.g. COUNTYNS
 *						11: shapefile_desc_column; e.g. NAME
 * 						12: lookup_desc_column; e.g. AREANAME
 *						13: resolution: Can use a map for selection at this resolution (0/1)
 *						14: comparea: Able to be used as a comparison area (0/1)
 *						15: listing: Able to be used in a disease map listing (0/1)
 *
 * Description:			Insert into geography table
 * Note:				%% becomes % after substitution
 */
INSERT INTO t_rif40_geolevels (
   geography, geolevel_name, geolevel_id, description, lookup_table,
   lookup_desc_column, shapefile, shapefile_table, shapefile_area_id_column, shapefile_desc_column,
   resolution, comparea, listing, covariate_table)
SELECT 'SAHSULAND' AS geography,
       'SAHSU_GRD_LEVEL4' AS geolevel_name,
       4 AS geolevel_id,
       'Level 4' AS description,
       'LOOKUP_SAHSU_GRD_LEVEL4' AS lookup_table,
       'AREANAME' AS lookup_desc_column,
       'SAHSU_GRD_Level4.shp' AS shapefile,
       'SAHSU_GRD_LEVEL4' AS shapefile_table,
       'LEVEL4' AS shapefile_area_id_column,
       'LEVEL4' AS shapefile_desc_column,
       1 AS resolution,
       1 AS comparea,
       1 AS listing,
	   'COV_SAHSU_GRD_LEVEL4' AS covariate_table;
GO

--
-- Re-enable foreign key constraints
--

-- SQL statement 129: Enable constraints: rif40_covariates_geolevel_fk on: rif40_covariates >>>
/*
 * SQL statement name: 	enable_disable_constraint.sql
 * Type:				MS SQL Server SQL statement
 * Parameters:
 *						1: Schema; e.g. rif40. or ""
 *						2: Table; e.g. rif40_covariates
 *						3: NOCHECK/CHECK (disable/enable)
 *						4: Constraint; e.g. rif40_covariates_geolevel_fk
 *
 * Description:			Enable or disable a constraint
 * Note:				% becomes % after substitution
 */
ALTER TABLE rif40.rif40_covariates CHECK CONSTRAINT rif40_covariates_geolevel_fk;
GO

-- SQL statement 130: Enable constraints: rif40_covariates_geog_fk on: rif40_covariates >>>
/*
 * SQL statement name: 	enable_disable_constraint.sql
 * Type:				MS SQL Server SQL statement
 * Parameters:
 *						1: Schema; e.g. rif40. or ""
 *						2: Table; e.g. rif40_covariates
 *						3: NOCHECK/CHECK (disable/enable)
 *						4: Constraint; e.g. rif40_covariates_geolevel_fk
 *
 * Description:			Enable or disable a constraint
 * Note:				% becomes % after substitution
 */
ALTER TABLE rif40.rif40_covariates CHECK CONSTRAINT rif40_covariates_geog_fk;
GO

-- SQL statement 131: Enable constraints: t_rif40_std_study_geolevel_fk on: t_rif40_studies >>>
/*
 * SQL statement name: 	enable_disable_constraint.sql
 * Type:				MS SQL Server SQL statement
 * Parameters:
 *						1: Schema; e.g. rif40. or ""
 *						2: Table; e.g. rif40_covariates
 *						3: NOCHECK/CHECK (disable/enable)
 *						4: Constraint; e.g. rif40_covariates_geolevel_fk
 *
 * Description:			Enable or disable a constraint
 * Note:				% becomes % after substitution
 */
ALTER TABLE rif40.t_rif40_studies CHECK CONSTRAINT t_rif40_std_study_geolevel_fk;
GO

-- SQL statement 132: Enable constraints: t_rif40_std_comp_geolevel_fk on: t_rif40_studies >>>
/*
 * SQL statement name: 	enable_disable_constraint.sql
 * Type:				MS SQL Server SQL statement
 * Parameters:
 *						1: Schema; e.g. rif40. or ""
 *						2: Table; e.g. rif40_covariates
 *						3: NOCHECK/CHECK (disable/enable)
 *						4: Constraint; e.g. rif40_covariates_geolevel_fk
 *
 * Description:			Enable or disable a constraint
 * Note:				% becomes % after substitution
 */
ALTER TABLE rif40.t_rif40_studies CHECK CONSTRAINT t_rif40_std_comp_geolevel_fk;
GO

-- SQL statement 133: Enable constraints: t_rif40_studies_geography_fk on: t_rif40_studies >>>
/*
 * SQL statement name: 	enable_disable_constraint.sql
 * Type:				MS SQL Server SQL statement
 * Parameters:
 *						1: Schema; e.g. rif40. or ""
 *						2: Table; e.g. rif40_covariates
 *						3: NOCHECK/CHECK (disable/enable)
 *						4: Constraint; e.g. rif40_covariates_geolevel_fk
 *
 * Description:			Enable or disable a constraint
 * Note:				% becomes % after substitution
 */
ALTER TABLE rif40.t_rif40_studies CHECK CONSTRAINT t_rif40_studies_geography_fk;
GO

-- SQL statement 134: Enable constraints: t_rif40_inv_cov_geography_fk on: t_rif40_inv_covariates >>>
/*
 * SQL statement name: 	enable_disable_constraint.sql
 * Type:				MS SQL Server SQL statement
 * Parameters:
 *						1: Schema; e.g. rif40. or ""
 *						2: Table; e.g. rif40_covariates
 *						3: NOCHECK/CHECK (disable/enable)
 *						4: Constraint; e.g. rif40_covariates_geolevel_fk
 *
 * Description:			Enable or disable a constraint
 * Note:				% becomes % after substitution
 */
ALTER TABLE rif40.t_rif40_inv_covariates CHECK CONSTRAINT t_rif40_inv_cov_geography_fk;
GO

-- SQL statement 135: Enable constraints: t_rif40_inv_cov_geolevel_fk on: t_rif40_inv_covariates >>>
/*
 * SQL statement name: 	enable_disable_constraint.sql
 * Type:				MS SQL Server SQL statement
 * Parameters:
 *						1: Schema; e.g. rif40. or ""
 *						2: Table; e.g. rif40_covariates
 *						3: NOCHECK/CHECK (disable/enable)
 *						4: Constraint; e.g. rif40_covariates_geolevel_fk
 *
 * Description:			Enable or disable a constraint
 * Note:				% becomes % after substitution
 */
ALTER TABLE rif40.t_rif40_inv_covariates CHECK CONSTRAINT t_rif40_inv_cov_geolevel_fk;
GO

-- SQL statement 136: Populate geography meta data table >>>
/*
 * SQL statement name: 	update_geography.sql
 * Type:				Common SQL statement
 * Parameters:
 *						1: table; e.g. GEOGRAPHY_CB_2014_US_COUNTY_500K
 *						2: geography; e.g. CB_2014_US_500K
 *						3: Default comparision area, e.g. GEOID
 *						4: Default study area, e.g. STATENS
 *
 * Description:			Insert into geography table
 * Note:				%% becomes % after substitution
 */
UPDATE rif40_geographies
   SET defaultcomparea  = 'SAHSU_GRD_LEVEL1',
       defaultstudyarea = 'SAHSU_GRD_LEVEL3'
 WHERE geography = 'SAHSULAND';
GO

-- SQL statement 137: Update areaid_count column in geolevels table using geometry table >>>
/*
 * SQL statement name: 	geolevels_areaid_update.sql
 * Type:				MS SQL Server SQL statement
 * Parameters:
 *						1: Geolevels table; e.g. geolevels_cb_2014_us_500k
 *						2: Geometry table geometry_cb_2014_us_500k
 *						3: Schema; e.g. rif_data. or ""
 *
 * Description:			Update areaid_count column in geolevels table using geometry table
 * Note:				% becomes % after substitution
 */
WITH b AS (
	SELECT geolevel_id, COUNT(DISTINCT(areaid)) AS areaid_count
	  FROM rif_data.geometry_sahsuland
	 GROUP BY geolevel_id
)
UPDATE a
   SET areaid_count = b.areaid_count
  FROM t_rif40_geolevels a
  JOIN b ON a.geolevel_id = b.geolevel_id
 WHERE geography = 'SAHSULAND';
GO

-- SQL statement 138: Check areaid_count column in geolevels table using geometry table >>>
/*
 * SQL statement name: 	geolevels_areaid_check.sql
 * Type:				MS SQL Server SQL statement
 * Parameters:
 *						1: Geolevels table; e.g. geolevels_cb_2014_us_500k
 *						2: Schema; e.g. rif40. or ""
 *
 * Description:			Update areaid_count column in geolevels table using geometry table
 * Note:				% becomes % after substitution
 */
DECLARE c1 CURSOR FOR
		SELECT geolevel_id, geolevel_name, areaid_count
		  FROM rif40.t_rif40_geolevels;
--
DECLARE @c1_rec_geolevel_id 	INTEGER;
DECLARE @c1_rec_geolevel_name 	VARCHAR(30);
DECLARE @c1_rec_areaid_count 	INTEGER;
--
DECLARE @errors INTEGER=0;

OPEN c1;
FETCH NEXT FROM c1 INTO @c1_rec_geolevel_id, @c1_rec_geolevel_name, @c1_rec_areaid_count;
WHILE @@FETCH_STATUS = 0
BEGIN
	IF @c1_rec_areaid_count > 0 
		PRINT 'geolevel: ' + CAST(@c1_rec_geolevel_id AS VARCHAR) + ':' + @c1_rec_geolevel_name + 
			' areaid_count: ' + CAST(@c1_rec_areaid_count AS VARCHAR)
	ELSE IF @c1_rec_areaid_count IS NULL BEGIN
			SET @errors=@errors+1;
			PRINT 'WARNING: geolevel: ' + CAST(@c1_rec_geolevel_id AS VARCHAR) + ':' + @c1_rec_geolevel_name + 
				' areaid_count IS NULL';	
		END;
	ELSE BEGIN
		PRINT 'WARNING: geolevel: ' + CAST(@c1_rec_geolevel_id AS VARCHAR) + ':' + @c1_rec_geolevel_name + 
			' errors is zero';
		SET @errors=@errors+1;
	END;
    FETCH NEXT FROM c1 INTO @c1_rec_geolevel_id, @c1_rec_geolevel_name, @c1_rec_areaid_count;
END;
CLOSE c1;
DEALLOCATE c1;
IF @errors = 0
	PRINT 'Geolevels table: t_rif40_geolevels no zero areaid_counts';
ELSE
	RAISERROR('Geolevels table: t_rif40_geolevels %i geolevels have zero areaid_counts', 16, 1, @errors);;
GO

-- SQL statement 139: Drop dependent object - view tiles_sahsuland >>>
IF OBJECT_ID('rif_data.tiles_sahsuland', 'V') IS NOT NULL DROP VIEW rif_data.tiles_sahsuland;
GO

--
-- Drop and recreate dependent objects required by tiles view: generate_series() [MS SQL Server only]
--

-- SQL statement 141: Drop generate_series() function >>>
/*
 * SQL statement name: 	drop_generate_series.sql
 * Type:				MS SQL Server SQL statement
 * Parameters:			None
 * Description:			Drop generate_series() function (TF = SQL table-valued-function)
 */
IF OBJECT_ID (N'generate_series', N'TF') IS NOT NULL  
    DROP FUNCTION generate_series;  ;
GO

-- SQL statement 142: Create generate_series() function >>>
/*
 * SQL statement name: 	generate_series.sql
 * Type:				MS SQL Server SQL statement
 * Parameters:			None
 * Description:			Generate a series of values, from start to stop with a step size of step
 *						Original by: Simon Greener, Independent GeoSpatial Solutions Architect
 *						http://www.spatialdbadvisor.com/sql_server_blog/86/generate_series-for-sql-server-2008
 */
CREATE FUNCTION generate_series ( @p_start INT, @p_end INT, @p_step INT=1 )
RETURNS @Integers TABLE ( [IntValue] INT )
AS
BEGIN
    DECLARE
      @v_i                 INT,
      @v_step              INT,
      @v_terminating_value INT;
    BEGIN
      SET @v_i = CASE WHEN @p_start IS NULL THEN 1 ELSE @p_start END;
      SET @v_step  = CASE WHEN @p_step IS NULL OR @p_step = 0 THEN 1 ELSE @p_step END;
      SET @v_terminating_value =  @p_start + CONVERT(INT,ABS(@p_start-@p_end) / ABS(@v_step) ) * @v_step;
      -- Check for impossible combinations
      IF NOT ( ( @p_start > @p_end AND SIGN(@p_step) = 1 )
               OR
               ( @p_start < @p_end AND SIGN(@p_step) = -1 ))
      BEGIN
        -- Generate values
        WHILE ( 1 = 1 )
        BEGIN
           INSERT INTO @Integers ( [IntValue] ) VALUES ( @v_i )
           IF ( @v_i = @v_terminating_value )
              BREAK
           SET @v_i = @v_i + @v_step;
        END;
      END;
    END;
    RETURN
END;
GO

--
-- Create tiles functions
--

-- SQL statement 144: Create function: longitude2tile.sql >>>
/*
 * SQL statement name: 	longitude2tile.sql
 * Type:				Postgres/PostGIS PL/pgsql function
 * Parameters:			None
 *
 * Description:			Convert longitude (WGS84 - 4326) to OSM tile x
 * Note:				% becomes % after substitution
 */
IF OBJECT_ID (N'tileMaker_longitude2tile', N'FN') IS NOT NULL  
    DROP FUNCTION tileMaker_longitude2tile;  
GO 

CREATE FUNCTION tileMaker_longitude2tile(@longitude DOUBLE PRECISION, @zoom_level INTEGER)
RETURNS INTEGER AS
BEGIN
	DECLARE @tileX INTEGER;
	SET @tileX=CAST(
			FLOOR( (@longitude + 180) / 360 * POWER(2, @zoom_level) ) AS INTEGER);
	RETURN @tileX;
END;
GO
  
DECLARE @CurrentUser sysname;
SELECT @CurrentUser = user_name(); 
EXECUTE sp_addextendedproperty  'MS_Description', 'Function: 	 tileMaker_longitude2tile()
Parameters:	 Longitude, zoom level
Returns:	 OSM Tile x
Description: Convert longitude (WGS84 - 4326) to OSM tile x

Derivation of the tile X/Y 

* Reproject the coordinates to the Mercator projection (from EPSG:4326 to EPSG:3857):

x = lon
y = arsinh(tan(lat)) = log[tan(lat) + sec(lat)]
(lat and lon are in radians)

* Transform range of x and y to 0 � 1 and shift origin to top left corner:

x = [1 + (x / p)] / 2
y = [1 - (y / p)] / 2

* Calculate the number of tiles across the map, n, using 2**zoom
* Multiply x and y by n. Round results down to give tilex and tiley.
',
   'user', @CurrentUser,   
   'function', 'tileMaker_longitude2tile';
GO

-- SQL statement 145: Create function: latitude2tile.sql >>>
/*
 * SQL statement name: 	latitude2tile.sql
 * Type:				Microsoft SQL Server T/sql function
 * Parameters:			None
 *
 * Description:			Convert latitude (WGS84 - 4326) to OSM tile y
 * Note:				% becomes % after substitution
 */
IF OBJECT_ID (N'tileMaker_latitude2tile', N'FN') IS NOT NULL  
    DROP FUNCTION tileMaker_latitude2tile;  
GO 

CREATE FUNCTION tileMaker_latitude2tile(@latitude DOUBLE PRECISION, @zoom_level INTEGER)
RETURNS INTEGER 
AS
BEGIN
	DECLARE @tileY INTEGER;
	SET @tileY=CAST(
					FLOOR( 
						(1.0 - LOG /* Natural Log */ 
							(TAN(RADIANS(@latitude)) + 1.0 / COS(RADIANS(@latitude))) / PI()) / 2.0 * POWER(2, @zoom_level) 
						) 
					AS INTEGER);
	RETURN @tileY;
END;
GO
  
DECLARE @CurrentUser sysname;
SELECT @CurrentUser = user_name(); 
EXECUTE sp_addextendedproperty  'MS_Description', 'Function: 	 tileMaker_latitude2tile()
Parameters:	 Latitude, zoom level
Returns:	 OSM Tile y
Description: Convert latitude (WGS84 - 4326) to OSM tile x

Derivation of the tile X/Y 

* Reproject the coordinates to the Mercator projection (from EPSG:4326 to EPSG:3857):

x = lon
y = arsinh(tan(lat)) = log[tan(lat) + sec(lat)]
(lat and lon are in radians)

* Transform range of x and y to 0 � 1 and shift origin to top left corner:

x = [1 + (x / p)] / 2
y = [1 - (y / p)] / 2

* Calculate the number of tiles across the map, n, using 2**zoom
* Multiply x and y by n. Round results down to give tilex and tiley.
',
   'user', @CurrentUser,   
   'function', 'tileMaker_latitude2tile';
GO

-- SQL statement 146: Create function: tile2longitude.sql >>>
/*
 * SQL statement name: 	tile2longitude.sql
 * Type:				Postgres/PostGIS PL/pgsql function
 * Parameters:			None
 *
 * Description:			Convert OSM tile x to longitude (WGS84 - 4326) 
 * Note:				% becomes % after substitution
 */
IF OBJECT_ID (N'tileMaker_tile2longitude', N'FN') IS NOT NULL  
    DROP FUNCTION tileMaker_tile2longitude;  
GO 

CREATE FUNCTION tileMaker_tile2longitude(@x INTEGER, @zoom_level INTEGER)
RETURNS DOUBLE PRECISION AS
BEGIN
	DECLARE @longitude DOUBLE PRECISION;
	SET @longitude=CAST( ( (@x * 1.0) / POWER(2, @zoom_level) * 360.0) - 180.0 AS DOUBLE PRECISION);
	RETURN @longitude;
END;
GO
  
DECLARE @CurrentUser sysname;
SELECT @CurrentUser = user_name(); 
EXECUTE sp_addextendedproperty  'MS_Description', 'Function: 	 tileMaker_tile2longitude()
Parameters:	 OSM Tile x, zoom level
Returns:	 Longitude
Description: Convert OSM tile x to longitude (WGS84 - 4326)
',
   'user', @CurrentUser,   
   'function', 'tileMaker_tile2longitude';
GO

-- SQL statement 147: Create function: tile2latitude.sql >>>
/*
 * SQL statement name: 	tileMaker_tile2latitude.sql
 * Type:				Postgres/PostGIS PL/pgsql function
 * Parameters:			None
 *
 * Description:			Convert OSM tile y to latitude (WGS84 - 4326)
 * Note:				% becomes % after substitution
 */
IF OBJECT_ID (N'tileMaker_tile2latitude', N'FN') IS NOT NULL  
    DROP FUNCTION tileMaker_tile2latitude;  
GO 

CREATE FUNCTION tileMaker_tile2latitude(@y INTEGER, @zoom_level INTEGER)
RETURNS DOUBLE PRECISION AS
BEGIN
	DECLARE @latitude DOUBLE PRECISION;
	DECLARE @n FLOAT;
	DECLARE @sinh FLOAT;
	DECLARE @E FLOAT = 2.7182818284;
	
    SET @n = PI() - (2.0 * PI() * @y) / POWER(2.0, @zoom_level);
    SET @sinh = (1 - POWER(@E, -2*@n)) / (2 * POWER(@E, -@n));
    SET @latitude = DEGREES(ATAN(@sinh));
	RETURN @latitude;
END;
GO
  
DECLARE @CurrentUser sysname;
SELECT @CurrentUser = user_name(); 
EXECUTE sp_addextendedproperty  'MS_Description', 'Function: 	 tileMaker_tile2latitude()
Parameters:	 OSM Tile y, zoom level
Returns:	 Latitude
Description: Convert OSM tile y to latitude (WGS84 - 4326)
',
   'user', @CurrentUser,   
   'function', 'tileMaker_tile2latitude';
GO

--
-- Create tiles tables
--

-- SQL statement 149: Drop table t_tiles_sahsuland >>>
IF OBJECT_ID('rif_data.t_tiles_sahsuland', 'U') IS NOT NULL DROP TABLE rif_data.t_tiles_sahsuland;
GO

-- SQL statement 150: Create tiles table >>>
/*
 * SQL statement name: 	create_tiles_table.sql
 * Type:				Common SQL statement
 * Parameters:
 *						1: table; e.g. t_tiles_cb_2014_us_county_500k
 *						2: JSON datatype (Postgres JSON, SQL server Text)
 *						3: Schema; e.g. rif_data. or ""
 *
 * Description:			Create tiles table
 * Note:				%% becomes % after substitution
 */
CREATE TABLE rif_data.t_tiles_sahsuland (
	geolevel_id			INTEGER			NOT NULL,
	zoomlevel			INTEGER			NOT NULL,
	x					INTEGER			NOT NULL, 
	y					INTEGER			NOT NULL,
	optimised_topojson	NVARCHAR(MAX),
	tile_id				VARCHAR(200)	NOT NULL,
	areaid_count		INTEGER			NOT NULL,
	PRIMARY KEY (tile_id));
GO

-- SQL statement 151: Comment tiles table >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_table.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. cb_2014_us_county_500k
 *						2: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.t_tiles_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).t_tiles_sahsuland';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name]     = N'MS_Description'
		   AND [minor_id] = 0)
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Maptiles for geography; empty tiles are added to complete zoomlevels for zoomlevels 0 to 11', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 't_tiles_sahsuland'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Maptiles for geography; empty tiles are added to complete zoomlevels for zoomlevels 0 to 11', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 't_tiles_sahsuland';
GO

-- SQL statement 152: Comment tiles table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.t_tiles_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).t_tiles_sahsuland';
SELECT @columnName  = 'geolevel_id';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'ID for ordering (1=lowest resolution). Up to 99 supported.', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 't_tiles_sahsuland',
		@level2type = N'Column', @level2name = 'geolevel_id'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'ID for ordering (1=lowest resolution). Up to 99 supported.', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 't_tiles_sahsuland',
		@level2type = N'Column', @level2name = 'geolevel_id';
GO

-- SQL statement 153: Comment tiles table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.t_tiles_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).t_tiles_sahsuland';
SELECT @columnName  = 'zoomlevel';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Zoom level: 0 to 11. Number of tiles is 2**<zoom level> * 2**<zoom level>; i.e. 1, 2x2, 4x4 ... 2048x2048 at zoomlevel 11', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 't_tiles_sahsuland',
		@level2type = N'Column', @level2name = 'zoomlevel'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Zoom level: 0 to 11. Number of tiles is 2**<zoom level> * 2**<zoom level>; i.e. 1, 2x2, 4x4 ... 2048x2048 at zoomlevel 11', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 't_tiles_sahsuland',
		@level2type = N'Column', @level2name = 'zoomlevel';
GO

-- SQL statement 154: Comment tiles table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.t_tiles_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).t_tiles_sahsuland';
SELECT @columnName  = 'x';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'X tile number. From 0 to (2**<zoomlevel>)-1', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 't_tiles_sahsuland',
		@level2type = N'Column', @level2name = 'x'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'X tile number. From 0 to (2**<zoomlevel>)-1', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 't_tiles_sahsuland',
		@level2type = N'Column', @level2name = 'x';
GO

-- SQL statement 155: Comment tiles table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.t_tiles_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).t_tiles_sahsuland';
SELECT @columnName  = 'y';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Y tile number. From 0 to (2**<zoomlevel>)-1', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 't_tiles_sahsuland',
		@level2type = N'Column', @level2name = 'y'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Y tile number. From 0 to (2**<zoomlevel>)-1', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 't_tiles_sahsuland',
		@level2type = N'Column', @level2name = 'y';
GO

-- SQL statement 156: Comment tiles table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.t_tiles_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).t_tiles_sahsuland';
SELECT @columnName  = 'optimised_topojson';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Tile multipolygon in TopoJSON format, optimised for zoomlevel N. The SRID is always 4326.', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 't_tiles_sahsuland',
		@level2type = N'Column', @level2name = 'optimised_topojson'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Tile multipolygon in TopoJSON format, optimised for zoomlevel N. The SRID is always 4326.', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 't_tiles_sahsuland',
		@level2type = N'Column', @level2name = 'optimised_topojson';
GO

-- SQL statement 157: Comment tiles table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.t_tiles_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).t_tiles_sahsuland';
SELECT @columnName  = 'tile_id';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Tile ID in the format <geolevel number>_<geolevel name>_<zoomlevel>_<X tile number>_<Y tile number>', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 't_tiles_sahsuland',
		@level2type = N'Column', @level2name = 'tile_id'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Tile ID in the format <geolevel number>_<geolevel name>_<zoomlevel>_<X tile number>_<Y tile number>', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 't_tiles_sahsuland',
		@level2type = N'Column', @level2name = 'tile_id';
GO

-- SQL statement 158: Comment tiles table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.t_tiles_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).t_tiles_sahsuland';
SELECT @columnName  = 'areaid_count';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Total number of areaIDs (geoJSON features)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 't_tiles_sahsuland',
		@level2type = N'Column', @level2name = 'areaid_count'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Total number of areaIDs (geoJSON features)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 't_tiles_sahsuland',
		@level2type = N'Column', @level2name = 'areaid_count';
GO

-- SQL statement 159: Add tiles index: t_tiles_sahsuland_x_tile >>>
CREATE INDEX t_tiles_sahsuland_x_tile ON rif_data.t_tiles_sahsuland (geolevel_id, zoomlevel, x);
GO

-- SQL statement 160: Add tiles index: t_tiles_sahsuland_y_tile >>>
CREATE INDEX t_tiles_sahsuland_y_tile ON rif_data.t_tiles_sahsuland (geolevel_id, zoomlevel, x);
GO

-- SQL statement 161: Add tiles index: t_tiles_sahsuland_xy_tile >>>
CREATE INDEX t_tiles_sahsuland_xy_tile ON rif_data.t_tiles_sahsuland (geolevel_id, zoomlevel, x, y);
GO

-- SQL statement 162: Add tiles index: t_tiles_sahsuland_areaid_count >>>
CREATE INDEX t_tiles_sahsuland_areaid_count ON rif_data.t_tiles_sahsuland (areaid_count);
GO

-- SQL statement 163: Create tiles view >>>
/*
 * SQL statement name: 	create_tiles_view.sql
 * Type:				Microsoft SQL Server SQL statement
 * Parameters:
 *						1: tiles view; e.g. tiles_cb_2014_us_county_500k
 *						2: geolevel table; e.g. geolevels_cb_2014_us_county_500k
 *						3: JSON datatype (Postgres JSON, SQL server VARCHAR) [No longer used]
 *						4: tiles table; e.g. t_tiles_cb_2014_us_500k
 *  					5: Max zoomlevel; e.g. 11
 *						6: Data schema; e.g. rif_data. or ""
 *						7: RIF or user schema; e.g. $(USERNAME) or rif40
 *						8: Geography; e.g. USA_2014
 *
 * Description:			Create tiles view
 * Note:				%% becomes % after substitution
 */
CREATE VIEW rif_data.tiles_sahsuland AS 
WITH a AS (
        SELECT geography,
               MAX(geolevel_id) AS max_geolevel_id
          FROM rif40.t_rif40_geolevels
		 WHERE geography = 'SAHSULAND'
         GROUP BY geography
), b AS (
		SELECT a.geography, z.IntValue AS geolevel_id 
		  FROM a CROSS APPLY rif40.generate_series(0, CAST(a.max_geolevel_id AS INTEGER), 1) z
), c AS (
        SELECT b2.geolevel_name,
               b.geolevel_id,
               b.geography,
			   b2.areaid_count
          FROM b, rif40.t_rif40_geolevels b2
		 WHERE b.geolevel_id = b2.geolevel_id
		   AND b.geography   = b2.geography
), d AS (
        SELECT z.IntValue AS zoomlevel
		  FROM rif40.generate_series(0, 11, 1) z /* RIF or user schema; e.g. $(USERNAME) or rif40 */
), ex AS (
        SELECT d.zoomlevel, z.IntValue AS xy_series
          FROM d CROSS APPLY rif40.generate_series(0, CAST(POWER(2, d.zoomlevel) AS INTEGER) - 1, 1) z
), ey AS (
        SELECT c.geolevel_name,
			   c.areaid_count,
               c.geolevel_id,
               c.geography,
               ex.zoomlevel,
               ex.xy_series
          FROM c,
               ex 
)
SELECT z.geography,
       z.geolevel_id,
       z.geolevel_name,
       CASE
            WHEN h1.tile_id IS NULL AND h2.tile_id IS NULL THEN 1
            ELSE 0
       END AS no_area_ids, 
       COALESCE(h1.tile_id, 
				CAST(z.geolevel_id AS VARCHAR) + 
					'_' +
					z.geolevel_name +
					'_' +
					CAST(z.zoomlevel AS VARCHAR) +
					'_' + 
					CAST(z.x AS VARCHAR) +
					'_' +
					CAST(z.y AS VARCHAR)
				) AS tile_id,
       z.x,
       z.y,
       z.zoomlevel,
       COALESCE(h1.optimised_topojson, 
				h2.optimised_topojson, 
				'{"type": "FeatureCollection","features":[]}' /* NULL geojson */) AS optimised_topojson
  FROM ( 
		SELECT ey.geolevel_name,
			   ey.areaid_count,
               ey.geolevel_id,
               ey.geography,
               ex.zoomlevel,
               ex.xy_series AS x,
               ey.xy_series AS y
          FROM ey, ex /* Cross join */
         WHERE ex.zoomlevel = ey.zoomlevel
		) z
		 LEFT JOIN rif_data.t_tiles_sahsuland h1 ON ( /* Multiple area ids in the geolevel */
				z.areaid_count > 1 AND
				z.zoomlevel    = h1.zoomlevel AND 
				z.x            = h1.x AND 
				z.y            = h1.y AND 
				z.geolevel_id  = h1.geolevel_id)
		 LEFT JOIN rif_data.t_tiles_sahsuland h2 ON ( /* Single area ids in the geolevel */
				z.areaid_count = 1 AND
				h2.zoomlevel   = 0 AND 
				h2.x           = 0 AND 
				h2.y           = 0 AND 
				h2.geolevel_id = 1);
GO

-- SQL statement 164: Comment tiles view >>>
DECLARE @CurrentUser sysname /*
 * SQL statement name: 	comment_view.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: view; e.g. tiles_cb_us_county_500k
 *						2: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment view
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
EXECUTE sp_addextendedproperty
@name = N'MS_Description',   
@value = N'Maptiles view for geography; empty tiles are added to complete zoomlevels for zoomlevels 0 to 11. This view is efficent!', 
@level0type = N'Schema', @level0name = $(SchemaName),  
@level1type = N'View', @level1name = 'tiles_sahsuland'   ;
GO

-- SQL statement 165: Comment tiles view column >>>
DECLARE @CurrentUser sysname /*
 * SQL statement name: 	comment_view_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: view; e.g. tiles_cb_2014_us_500k
 *						2: column; e.g. geography
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name();
EXECUTE sp_addextendedproperty
@name = N'MS_Description',   
@value = N'Geography', 
@level0type = N'Schema', @level0name = $(SchemaName),  
@level1type = N'View', @level1name = 'tiles_sahsuland',
@level2type = N'Column', @level2name = 'geography';
GO

-- SQL statement 166: Comment tiles view column >>>
DECLARE @CurrentUser sysname /*
 * SQL statement name: 	comment_view_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: view; e.g. tiles_cb_2014_us_500k
 *						2: column; e.g. geography
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name();
EXECUTE sp_addextendedproperty
@name = N'MS_Description',   
@value = N'ID for ordering (1=lowest resolution). Up to 99 supported.', 
@level0type = N'Schema', @level0name = $(SchemaName),  
@level1type = N'View', @level1name = 'tiles_sahsuland',
@level2type = N'Column', @level2name = 'geolevel_id';
GO

-- SQL statement 167: Comment tiles view column >>>
DECLARE @CurrentUser sysname /*
 * SQL statement name: 	comment_view_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: view; e.g. tiles_cb_2014_us_500k
 *						2: column; e.g. geography
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name();
EXECUTE sp_addextendedproperty
@name = N'MS_Description',   
@value = N'Zoom level: 0 to 11. Number of tiles is 2**<zoom level> * 2**<zoom level>; i.e. 1, 2x2, 4x4 ... 2048x2048 at zoomlevel 11', 
@level0type = N'Schema', @level0name = $(SchemaName),  
@level1type = N'View', @level1name = 'tiles_sahsuland',
@level2type = N'Column', @level2name = 'zoomlevel';
GO

-- SQL statement 168: Comment tiles view column >>>
DECLARE @CurrentUser sysname /*
 * SQL statement name: 	comment_view_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: view; e.g. tiles_cb_2014_us_500k
 *						2: column; e.g. geography
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name();
EXECUTE sp_addextendedproperty
@name = N'MS_Description',   
@value = N'X tile number. From 0 to (2**<zoomlevel>)-1', 
@level0type = N'Schema', @level0name = $(SchemaName),  
@level1type = N'View', @level1name = 'tiles_sahsuland',
@level2type = N'Column', @level2name = 'x';
GO

-- SQL statement 169: Comment tiles view column >>>
DECLARE @CurrentUser sysname /*
 * SQL statement name: 	comment_view_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: view; e.g. tiles_cb_2014_us_500k
 *						2: column; e.g. geography
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name();
EXECUTE sp_addextendedproperty
@name = N'MS_Description',   
@value = N'Y tile number. From 0 to (2**<zoomlevel>)-1', 
@level0type = N'Schema', @level0name = $(SchemaName),  
@level1type = N'View', @level1name = 'tiles_sahsuland',
@level2type = N'Column', @level2name = 'y';
GO

-- SQL statement 170: Comment tiles view column >>>
DECLARE @CurrentUser sysname /*
 * SQL statement name: 	comment_view_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: view; e.g. tiles_cb_2014_us_500k
 *						2: column; e.g. geography
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name();
EXECUTE sp_addextendedproperty
@name = N'MS_Description',   
@value = N'Tile multipolygon in TopoJSON format, optimised for zoomlevel N. The SRID is always 4326.', 
@level0type = N'Schema', @level0name = $(SchemaName),  
@level1type = N'View', @level1name = 'tiles_sahsuland',
@level2type = N'Column', @level2name = 'optimised_topojson';
GO

-- SQL statement 171: Comment tiles view column >>>
DECLARE @CurrentUser sysname /*
 * SQL statement name: 	comment_view_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: view; e.g. tiles_cb_2014_us_500k
 *						2: column; e.g. geography
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name();
EXECUTE sp_addextendedproperty
@name = N'MS_Description',   
@value = N'Tile ID in the format <geolevel number>_<geolevel name>_<zoomlevel>_<X tile number>_<Y tile number>', 
@level0type = N'Schema', @level0name = $(SchemaName),  
@level1type = N'View', @level1name = 'tiles_sahsuland',
@level2type = N'Column', @level2name = 'tile_id';
GO

-- SQL statement 172: Comment tiles view column >>>
DECLARE @CurrentUser sysname /*
 * SQL statement name: 	comment_view_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: view; e.g. tiles_cb_2014_us_500k
 *						2: column; e.g. geography
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name();
EXECUTE sp_addextendedproperty
@name = N'MS_Description',   
@value = N'Name of geolevel. This will be a column name in the numerator/denominator tables', 
@level0type = N'Schema', @level0name = $(SchemaName),  
@level1type = N'View', @level1name = 'tiles_sahsuland',
@level2type = N'Column', @level2name = 'geolevel_name';
GO

-- SQL statement 173: Comment tiles view column >>>
DECLARE @CurrentUser sysname /*
 * SQL statement name: 	comment_view_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: view; e.g. tiles_cb_2014_us_500k
 *						2: column; e.g. geography
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name();
EXECUTE sp_addextendedproperty
@name = N'MS_Description',   
@value = N'Tile contains no area_ids flag: 0/1', 
@level0type = N'Schema', @level0name = $(SchemaName),  
@level1type = N'View', @level1name = 'tiles_sahsuland',
@level2type = N'Column', @level2name = 'no_area_ids';
GO

--
-- Load tiles table
--

-- SQL statement 175: Create load tiles view >>>
CREATE VIEW rif_data.v_tiles_sahsuland
AS
SELECT geolevel_id, zoomlevel, x, y, tile_id, areaid_count, optimised_topojson
  FROM rif_data.t_tiles_sahsuland;
GO

-- SQL statement 176: Load DB dependent tiles table from geolevel CSV files >>>
BULK INSERT rif_data.v_tiles_sahsuland
FROM '$(pwd)\mssql_t_tiles_sahsu_grd_level1.csv'	-- Note use of pwd; set via -v pwd="%cd%" in the sqlcmd command line
WITH
(
	FORMATFILE = '$(pwd)\mssql_t_tiles_sahsu_grd_level1.fmt',		-- Use a format file
	TABLOCK					-- Table lock
);
GO

-- SQL statement 177: Create load tiles view >>>
DROP VIEW rif_data.v_tiles_sahsuland;
GO

-- SQL statement 178: Create load tiles view >>>
CREATE VIEW rif_data.v_tiles_sahsuland
AS
SELECT geolevel_id, zoomlevel, x, y, tile_id, areaid_count, optimised_topojson
  FROM rif_data.t_tiles_sahsuland;
GO

-- SQL statement 179: Load DB dependent tiles table from geolevel CSV files >>>
BULK INSERT rif_data.v_tiles_sahsuland
FROM '$(pwd)\mssql_t_tiles_sahsu_grd_level2.csv'	-- Note use of pwd; set via -v pwd="%cd%" in the sqlcmd command line
WITH
(
	FORMATFILE = '$(pwd)\mssql_t_tiles_sahsu_grd_level2.fmt',		-- Use a format file
	TABLOCK					-- Table lock
);
GO

-- SQL statement 180: Create load tiles view >>>
DROP VIEW rif_data.v_tiles_sahsuland;
GO

-- SQL statement 181: Create load tiles view >>>
CREATE VIEW rif_data.v_tiles_sahsuland
AS
SELECT geolevel_id, zoomlevel, x, y, tile_id, areaid_count, optimised_topojson
  FROM rif_data.t_tiles_sahsuland;
GO

-- SQL statement 182: Load DB dependent tiles table from geolevel CSV files >>>
BULK INSERT rif_data.v_tiles_sahsuland
FROM '$(pwd)\mssql_t_tiles_sahsu_grd_level3.csv'	-- Note use of pwd; set via -v pwd="%cd%" in the sqlcmd command line
WITH
(
	FORMATFILE = '$(pwd)\mssql_t_tiles_sahsu_grd_level3.fmt',		-- Use a format file
	TABLOCK					-- Table lock
);
GO

-- SQL statement 183: Create load tiles view >>>
DROP VIEW rif_data.v_tiles_sahsuland;
GO

-- SQL statement 184: Create load tiles view >>>
CREATE VIEW rif_data.v_tiles_sahsuland
AS
SELECT geolevel_id, zoomlevel, x, y, tile_id, areaid_count, optimised_topojson
  FROM rif_data.t_tiles_sahsuland;
GO

-- SQL statement 185: Load DB dependent tiles table from geolevel CSV files >>>
BULK INSERT rif_data.v_tiles_sahsuland
FROM '$(pwd)\mssql_t_tiles_sahsu_grd_level4.csv'	-- Note use of pwd; set via -v pwd="%cd%" in the sqlcmd command line
WITH
(
	FORMATFILE = '$(pwd)\mssql_t_tiles_sahsu_grd_level4.fmt',		-- Use a format file
	TABLOCK					-- Table lock
);
GO

-- SQL statement 186: Create load tiles view >>>
DROP VIEW rif_data.v_tiles_sahsuland;
GO

--
-- Analyze tables
--

-- SQL statement 188: Grant table/view lookup_sahsu_grd_level1 >>>
/*
 * SQL statement name: 	grant_table.sql
 * Type:				Common SQL statement
 * Parameters:
 *						1: table/view; e.g. tiles_cb_2014_us_county_500k
 *						2: Privileges; e.g. SELECT
 *						3: Roles; e.g. rif_user, rif_manager
 *
 * Description:			Create tiles view
 * Note:				%% becomes % after substitution
 */
GRANT SELECT ON rif_data.lookup_sahsu_grd_level1 TO rif_user, rif_manager;
GO

-- SQL statement 189: Grant table/view lookup_sahsu_grd_level2 >>>
/*
 * SQL statement name: 	grant_table.sql
 * Type:				Common SQL statement
 * Parameters:
 *						1: table/view; e.g. tiles_cb_2014_us_county_500k
 *						2: Privileges; e.g. SELECT
 *						3: Roles; e.g. rif_user, rif_manager
 *
 * Description:			Create tiles view
 * Note:				%% becomes % after substitution
 */
GRANT SELECT ON rif_data.lookup_sahsu_grd_level2 TO rif_user, rif_manager;
GO

-- SQL statement 190: Grant table/view lookup_sahsu_grd_level3 >>>
/*
 * SQL statement name: 	grant_table.sql
 * Type:				Common SQL statement
 * Parameters:
 *						1: table/view; e.g. tiles_cb_2014_us_county_500k
 *						2: Privileges; e.g. SELECT
 *						3: Roles; e.g. rif_user, rif_manager
 *
 * Description:			Create tiles view
 * Note:				%% becomes % after substitution
 */
GRANT SELECT ON rif_data.lookup_sahsu_grd_level3 TO rif_user, rif_manager;
GO

-- SQL statement 191: Grant table/view lookup_sahsu_grd_level4 >>>
/*
 * SQL statement name: 	grant_table.sql
 * Type:				Common SQL statement
 * Parameters:
 *						1: table/view; e.g. tiles_cb_2014_us_county_500k
 *						2: Privileges; e.g. SELECT
 *						3: Roles; e.g. rif_user, rif_manager
 *
 * Description:			Create tiles view
 * Note:				%% becomes % after substitution
 */
GRANT SELECT ON rif_data.lookup_sahsu_grd_level4 TO rif_user, rif_manager;
GO

-- SQL statement 192: Grant table/view hierarchy_sahsuland >>>
/*
 * SQL statement name: 	grant_table.sql
 * Type:				Common SQL statement
 * Parameters:
 *						1: table/view; e.g. tiles_cb_2014_us_county_500k
 *						2: Privileges; e.g. SELECT
 *						3: Roles; e.g. rif_user, rif_manager
 *
 * Description:			Create tiles view
 * Note:				%% becomes % after substitution
 */
GRANT SELECT ON rif_data.hierarchy_sahsuland TO rif_user, rif_manager;
GO

-- SQL statement 193: Grant table/view geometry_sahsuland >>>
/*
 * SQL statement name: 	grant_table.sql
 * Type:				Common SQL statement
 * Parameters:
 *						1: table/view; e.g. tiles_cb_2014_us_county_500k
 *						2: Privileges; e.g. SELECT
 *						3: Roles; e.g. rif_user, rif_manager
 *
 * Description:			Create tiles view
 * Note:				%% becomes % after substitution
 */
GRANT SELECT ON rif_data.geometry_sahsuland TO rif_user, rif_manager;
GO

-- SQL statement 194: Grant table/view adjacency_sahsuland >>>
/*
 * SQL statement name: 	grant_table.sql
 * Type:				Common SQL statement
 * Parameters:
 *						1: table/view; e.g. tiles_cb_2014_us_county_500k
 *						2: Privileges; e.g. SELECT
 *						3: Roles; e.g. rif_user, rif_manager
 *
 * Description:			Create tiles view
 * Note:				%% becomes % after substitution
 */
GRANT SELECT ON rif_data.adjacency_sahsuland TO rif_user, rif_manager;
GO

-- SQL statement 195: Grant table/view t_tiles_sahsuland >>>
/*
 * SQL statement name: 	grant_table.sql
 * Type:				Common SQL statement
 * Parameters:
 *						1: table/view; e.g. tiles_cb_2014_us_county_500k
 *						2: Privileges; e.g. SELECT
 *						3: Roles; e.g. rif_user, rif_manager
 *
 * Description:			Create tiles view
 * Note:				%% becomes % after substitution
 */
GRANT SELECT ON rif_data.t_tiles_sahsuland TO rif_user, rif_manager;
GO

-- SQL statement 196: Grant table/view tiles_sahsuland >>>
/*
 * SQL statement name: 	grant_table.sql
 * Type:				Common SQL statement
 * Parameters:
 *						1: table/view; e.g. tiles_cb_2014_us_county_500k
 *						2: Privileges; e.g. SELECT
 *						3: Roles; e.g. rif_user, rif_manager
 *
 * Description:			Create tiles view
 * Note:				%% becomes % after substitution
 */
GRANT SELECT ON rif_data.tiles_sahsuland TO rif_user, rif_manager;
GO

-- SQL statement 197: Grant table/view adjacency_sahsuland >>>
/*
 * SQL statement name: 	grant_table.sql
 * Type:				Common SQL statement
 * Parameters:
 *						1: table/view; e.g. tiles_cb_2014_us_county_500k
 *						2: Privileges; e.g. SELECT
 *						3: Roles; e.g. rif_user, rif_manager
 *
 * Description:			Create tiles view
 * Note:				%% becomes % after substitution
 */
GRANT SELECT ON rif_data.adjacency_sahsuland TO rif_user, rif_manager;
GO

-- SQL statement 198: Commit transaction >>>
COMMIT;
GO

--
-- Analyze tables
--

-- SQL statement 200: Describe table lookup_sahsu_grd_level1 >>>
-- EXEC sp_help rif_data.lookup_sahsu_grd_level1;
GO

-- SQL statement 201: Analyze table lookup_sahsu_grd_level1 >>>
UPDATE STATISTICS rif_data.lookup_sahsu_grd_level1;
GO

-- SQL statement 202: Describe table lookup_sahsu_grd_level2 >>>
-- EXEC sp_help rif_data.lookup_sahsu_grd_level2;
GO

-- SQL statement 203: Analyze table lookup_sahsu_grd_level2 >>>
UPDATE STATISTICS rif_data.lookup_sahsu_grd_level2;
GO

-- SQL statement 204: Describe table lookup_sahsu_grd_level3 >>>
-- EXEC sp_help rif_data.lookup_sahsu_grd_level3;
GO

-- SQL statement 205: Analyze table lookup_sahsu_grd_level3 >>>
UPDATE STATISTICS rif_data.lookup_sahsu_grd_level3;
GO

-- SQL statement 206: Describe table lookup_sahsu_grd_level4 >>>
-- EXEC sp_help rif_data.lookup_sahsu_grd_level4;
GO

-- SQL statement 207: Analyze table lookup_sahsu_grd_level4 >>>
UPDATE STATISTICS rif_data.lookup_sahsu_grd_level4;
GO

-- SQL statement 208: Describe table hierarchy_sahsuland >>>
-- EXEC sp_help rif_data.hierarchy_sahsuland;
GO

-- SQL statement 209: Analyze table hierarchy_sahsuland >>>
UPDATE STATISTICS rif_data.hierarchy_sahsuland;
GO

-- SQL statement 210: Describe table geometry_sahsuland >>>
-- EXEC sp_help rif_data.geometry_sahsuland;
GO

-- SQL statement 211: Analyze table geometry_sahsuland >>>
UPDATE STATISTICS rif_data.geometry_sahsuland;
GO

-- SQL statement 212: Describe table t_tiles_sahsuland >>>
-- EXEC sp_help rif_data.t_tiles_sahsuland;
GO

-- SQL statement 213: Analyze table t_tiles_sahsuland >>>
UPDATE STATISTICS rif_data.t_tiles_sahsuland;
GO


--
-- EOF
